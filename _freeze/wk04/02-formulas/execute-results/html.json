{
  "hash": "c053f59e01d991e4a8311f352b0e0b96",
  "result": {
    "engine": "knitr",
    "markdown": "# Formulas\n\n\n\n\n\n\n\n\n\n## Basics of Formulas\n\nHow can we construct a design matrix in R? R has *formulas* to make this easy. See `?formula` for details.\n\nAs a working example, suppose a normal linear model\n$$\n\\mu_i = \\beta_0 + \\beta_1 x_{i1} + \\beta_2 x_{i2}.\n$$\n\nWe use formulas to specify the columns of the design matrix in the normal linear model. \n\nA formula has a LHS (left-hand side) and a RHS separated by a `~`. The LHS indicates the outcome and the RHS indicates the predictors. The RHS determines the columns of the linear predictor. The operator `+` adds predictors. By default, an intercept (a column of 1's) is included. \n\nFor the linear regression above, we would use the formula `y ~ x1 + x2`\n\n### `model.matrix()` examples\n\nThroughout these examples, I use the `penguins` data set from the {palmerpenguins} R package. For more, see `?palmerpenguins::penguins` or the [website for the package](https://allisonhorst.github.io/palmerpenguins/).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages \nlibrary(modelsummary)\nlibrary(palmerpenguins) # example data\n\n# quick look\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n\n\n:::\n\n```{.r .cell-code}\n# penguins has missing values, let's remove those rows for these examples.\npenguins <- na.omit(penguins)\n```\n:::\n\n\n\n\n#### Single numeric variable\n\nFor a linear regression model with a single predictor, we can use the formula below to construct the design matrix. Notice that the LHS is empty. The LHS is irrelevant for the design matrix, so I leave it empty in these examples.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- ~ flipper_length_mm\n```\n:::\n\n\n\n\nTo construct the design matrix `X`, we can use the `model.matrix()` function. We give `model.matrix()` a formula and a data set. It uses the RHS of the formula to construct the design matrix using the variables in the data set.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nX <- model.matrix(f, data = penguins)\n```\n:::\n\n\n\n\nWe can use the `head()` function to inspect the first six rows of the design matrix.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) flipper_length_mm\n1           1               181\n2           1               186\n3           1               195\n4           1               193\n5           1               190\n6           1               181\n```\n\n\n:::\n:::\n\n\n\n\n#### Two numeric variables\n\nWe can add a second predictor and we get the expected design matrix.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- ~ flipper_length_mm + body_mass_g\nX <- model.matrix(f, data = penguins)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) flipper_length_mm body_mass_g\n1           1               181        3750\n2           1               186        3800\n3           1               195        3250\n4           1               193        3450\n5           1               190        3650\n6           1               181        3625\n```\n\n\n:::\n:::\n\n\n\n\n#### Removing the intercept\n\nAn intercept (or column of ones) is added to the design matrix by default. You can remove the intercetp by adding `-1` or `+ 0` to the formula. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- ~ -1 + flipper_length_mm + body_mass_g\nX <- model.matrix(f, data = penguins)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  flipper_length_mm body_mass_g\n1               181        3750\n2               186        3800\n3               195        3250\n4               193        3450\n5               190        3650\n6               181        3625\n```\n\n\n:::\n:::\n\n\n\n\n### `lm()` examples\n\nTo see formulas from more familiar perspective, let's also use `lm()` to fit several linear models. We're using the `penguins` data with `bill_length_mm` as the outcome\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit1 <- lm(bill_length_mm ~ flipper_length_mm, data = penguins)\nfit2 <- lm(bill_length_mm ~ body_mass_g, data = penguins)\nfit3 <- lm(bill_length_mm ~ flipper_length_mm + body_mass_g, data = penguins)\nfit4 <- lm(bill_length_mm ~ flipper_length_mm - 1, data = penguins)\n\nmodelsummary(list(fit1, fit2, fit3, fit4), gof_map = NA)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_y186ydcmfs2xi0rxdsvy(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_y186ydcmfs2xi0rxdsvy\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function spanCell_y186ydcmfs2xi0rxdsvy(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_y186ydcmfs2xi0rxdsvy\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '6', j: 3 }, { i: '6', j: 2 }, { i: '6', j: 1 }, { i: '6', j: 4 },  ], css_id: 'tinytable_css_rbd33each8s08wz9yj92',}, \n          { positions: [ { i: '4', j: 1 }, { i: '1', j: 1 }, { i: '2', j: 1 }, { i: '3', j: 1 }, { i: '1', j: 2 }, { i: '5', j: 1 }, { i: '3', j: 2 }, { i: '4', j: 2 }, { i: '5', j: 2 }, { i: '2', j: 2 }, { i: '4', j: 3 }, { i: '1', j: 3 }, { i: '2', j: 3 }, { i: '3', j: 3 }, { i: '1', j: 4 }, { i: '5', j: 3 }, { i: '3', j: 4 }, { i: '4', j: 4 }, { i: '5', j: 4 }, { i: '2', j: 4 },  ], css_id: 'tinytable_css_sb5th05bueteesjyjdpa',}, \n          { positions: [ { i: '0', j: 1 }, { i: '0', j: 4 }, { i: '0', j: 3 }, { i: '0', j: 2 },  ], css_id: 'tinytable_css_cdrhwdgk5lycsgtyvmwo',}, \n          { positions: [ { i: '6', j: 0 },  ], css_id: 'tinytable_css_j93z6ygbppcqs3802j7i',}, \n          { positions: [ { i: '1', j: 0 }, { i: '2', j: 0 }, { i: '3', j: 0 }, { i: '4', j: 0 }, { i: '5', j: 0 },  ], css_id: 'tinytable_css_87ony0ywjuvxdaoevxte',}, \n          { positions: [ { i: '0', j: 0 },  ], css_id: 'tinytable_css_6ss63upi1nr1zykn0h1g',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_y186ydcmfs2xi0rxdsvy(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_rbd33each8s08wz9yj92, .table th.tinytable_css_rbd33each8s08wz9yj92 { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_sb5th05bueteesjyjdpa, .table th.tinytable_css_sb5th05bueteesjyjdpa { text-align: center; }\n      .table td.tinytable_css_cdrhwdgk5lycsgtyvmwo, .table th.tinytable_css_cdrhwdgk5lycsgtyvmwo { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_j93z6ygbppcqs3802j7i, .table th.tinytable_css_j93z6ygbppcqs3802j7i { text-align: left; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_87ony0ywjuvxdaoevxte, .table th.tinytable_css_87ony0ywjuvxdaoevxte { text-align: left; }\n      .table td.tinytable_css_6ss63upi1nr1zykn0h1g, .table th.tinytable_css_6ss63upi1nr1zykn0h1g { text-align: left; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_y186ydcmfs2xi0rxdsvy\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\"> </th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">(1)</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"2\">(2)</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"3\">(3)</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"4\">(4)</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">(Intercept)</td>\n                  <td data-row=\"1\" data-col=\"1\">-7.219</td>\n                  <td data-row=\"1\" data-col=\"2\">27.151</td>\n                  <td data-row=\"1\" data-col=\"3\">-3.981</td>\n                  <td data-row=\"1\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\"></td>\n                  <td data-row=\"2\" data-col=\"1\">(3.272)</td>\n                  <td data-row=\"2\" data-col=\"2\">(1.292)</td>\n                  <td data-row=\"2\" data-col=\"3\">(4.722)</td>\n                  <td data-row=\"2\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">flipper_length_mm</td>\n                  <td data-row=\"3\" data-col=\"1\">0.255</td>\n                  <td data-row=\"3\" data-col=\"2\"></td>\n                  <td data-row=\"3\" data-col=\"3\">0.227</td>\n                  <td data-row=\"3\" data-col=\"4\">0.219</td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\"></td>\n                  <td data-row=\"4\" data-col=\"1\">(0.016)</td>\n                  <td data-row=\"4\" data-col=\"2\"></td>\n                  <td data-row=\"4\" data-col=\"3\">(0.033)</td>\n                  <td data-row=\"4\" data-col=\"4\">(0.001)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"5\" data-col=\"0\">body_mass_g</td>\n                  <td data-row=\"5\" data-col=\"1\"></td>\n                  <td data-row=\"5\" data-col=\"2\">0.004</td>\n                  <td data-row=\"5\" data-col=\"3\">0.001</td>\n                  <td data-row=\"5\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"6\" data-col=\"0\"></td>\n                  <td data-row=\"6\" data-col=\"1\"></td>\n                  <td data-row=\"6\" data-col=\"2\">(0.000)</td>\n                  <td data-row=\"6\" data-col=\"3\">(0.001)</td>\n                  <td data-row=\"6\" data-col=\"4\"></td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n\n## Factors\n\nThe examples above show numerical variables. But formulas also handle factors. Factors are automatically expanded into indicator variables in the design matrix. By default, R uses *treatment coding*: one category is the baseline (reference) and the others are coded as 0/1 indicators.^[This is the standard approach in political science, but there are other ways. R also supports other contrast codings, such as `contr.sum` or `contr.helmert`. These can be useful to make regression tables informative about specific hypotheses, but they are not commonly used and won't be familiar to your readers.]\n\n### `model.matrix()` examples\n\n#### A single factor variable\n\nThe `penguins` data set contains a factor variable `species`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(penguins$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Adelie\"    \"Chinstrap\" \"Gentoo\"   \n```\n\n\n:::\n:::\n\n\n\n\nA formula with `species` on the right-hand side makes a design matrix with two an intercept and two indicators. One indicator variable is for Chinstrap penguins; the other is for Gentoo penguins. Adelie penguins are the reference (i.e., left-out) category. \n\nThe coefficients for `speciesChinstrap` and `speciesGentoo` are the changes in $\\mu_i$ for Chinstrap and Gentoo penguins relative to Adelie penguins, respectively.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- ~ species\nX <- model.matrix(f, data = penguins)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) speciesChinstrap speciesGentoo\n1           1                0             0\n2           1                0             0\n3           1                0             0\n4           1                0             0\n5           1                0             0\n6           1                0             0\n```\n\n\n:::\n:::\n\n\n\n\nWe can change the reference category from Adelie with the `relevel()` function. The below makes Gentoo the reference category.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins$species <- relevel(penguins$species, \"Gentoo\")\nf <- ~ species\nX <- model.matrix(f, data = penguins)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) speciesAdelie speciesChinstrap\n1           1             1                0\n2           1             1                0\n3           1             1                0\n4           1             1                0\n5           1             1                0\n6           1             1                0\n```\n\n\n:::\n:::\n\n\n\n\nNow the coefficients for `speciesAdelie` and `speciesChinstrap` are the changes in $\\mu_i$ for Adelie and Chinstrap penguins relative to Gentoo penguins, respectively.\n\n#### A factor and numeric variable\n\nWe can include factors and continuous predictors together. For example, we combine `species` with `flipper_length_mm`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- ~ species + flipper_length_mm\nX <- model.matrix(f, data = penguins)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) speciesAdelie speciesChinstrap flipper_length_mm\n1           1             1                0               181\n2           1             1                0               186\n3           1             1                0               195\n4           1             1                0               193\n5           1             1                0               190\n6           1             1                0               181\n```\n\n\n:::\n:::\n\n\n\n\nThe resulting design matrix includes columns for the intercept, the dummy variables for `species`, and the continuous predictor. The coefficients on the indicators have the same interpretation variables represent differences between species, but now \"holding flipper length constant.\"\n\n### `lm()` examples\n\nAs familiar examples, here are a few `lm()` fits with factors `species` and `island` as predictors of `bill_length_mm`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# one factor\nfit1 <- lm(bill_length_mm ~ species, data = penguins)\n\n# two factors\nfit2 <- lm(bill_length_mm ~ species + island, data = penguins)\n\n# one factor, one numeric\nfit3 <- lm(bill_length_mm ~ species + flipper_length_mm, data = penguins)\n\n# one factor, two numeric\nfit4 <- lm(bill_length_mm ~ species + flipper_length_mm + body_mass_g, data = penguins)\n\nmodelsummary(list(fit1, fit2, fit3, fit4), gof_map = NA)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_98ha30h5r0fca2sek6f2(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_98ha30h5r0fca2sek6f2\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function spanCell_98ha30h5r0fca2sek6f2(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_98ha30h5r0fca2sek6f2\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '14', j: 1 }, { i: '14', j: 2 }, { i: '14', j: 3 }, { i: '14', j: 4 },  ], css_id: 'tinytable_css_d48pps02avws3za7ryla',}, \n          { positions: [ { i: '1', j: 1 }, { i: '3', j: 1 }, { i: '5', j: 1 }, { i: '7', j: 1 }, { i: '8', j: 1 }, { i: '9', j: 1 }, { i: '10', j: 1 }, { i: '11', j: 1 }, { i: '12', j: 1 }, { i: '13', j: 1 }, { i: '12', j: 2 }, { i: '2', j: 1 }, { i: '1', j: 2 }, { i: '4', j: 1 }, { i: '3', j: 2 }, { i: '6', j: 1 }, { i: '5', j: 2 }, { i: '6', j: 2 }, { i: '7', j: 2 }, { i: '8', j: 2 }, { i: '9', j: 2 }, { i: '10', j: 2 }, { i: '11', j: 2 }, { i: '10', j: 3 }, { i: '13', j: 2 }, { i: '12', j: 3 }, { i: '2', j: 2 }, { i: '1', j: 3 }, { i: '4', j: 2 }, { i: '3', j: 3 }, { i: '4', j: 3 }, { i: '5', j: 3 }, { i: '6', j: 3 }, { i: '7', j: 3 }, { i: '8', j: 3 }, { i: '9', j: 3 }, { i: '8', j: 4 }, { i: '11', j: 3 }, { i: '10', j: 4 }, { i: '13', j: 3 }, { i: '12', j: 4 }, { i: '2', j: 3 }, { i: '1', j: 4 }, { i: '2', j: 4 }, { i: '3', j: 4 }, { i: '4', j: 4 }, { i: '5', j: 4 }, { i: '6', j: 4 }, { i: '7', j: 4 }, { i: '9', j: 4 }, { i: '11', j: 4 }, { i: '13', j: 4 },  ], css_id: 'tinytable_css_sjl4nun9in7mj5rrgt27',}, \n          { positions: [ { i: '0', j: 1 }, { i: '0', j: 2 }, { i: '0', j: 3 }, { i: '0', j: 4 },  ], css_id: 'tinytable_css_5qsollvhdpqb8fv3lmgc',}, \n          { positions: [ { i: '14', j: 0 },  ], css_id: 'tinytable_css_uzesvz2qtham88urk4kw',}, \n          { positions: [ { i: '1', j: 0 }, { i: '2', j: 0 }, { i: '3', j: 0 }, { i: '4', j: 0 }, { i: '5', j: 0 }, { i: '6', j: 0 }, { i: '7', j: 0 }, { i: '8', j: 0 }, { i: '9', j: 0 }, { i: '10', j: 0 }, { i: '11', j: 0 }, { i: '12', j: 0 }, { i: '13', j: 0 },  ], css_id: 'tinytable_css_8b7o4xk07313c4qkoodi',}, \n          { positions: [ { i: '0', j: 0 },  ], css_id: 'tinytable_css_1lj8gv8k8us8lgs0b6n9',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_98ha30h5r0fca2sek6f2(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_d48pps02avws3za7ryla, .table th.tinytable_css_d48pps02avws3za7ryla { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_sjl4nun9in7mj5rrgt27, .table th.tinytable_css_sjl4nun9in7mj5rrgt27 { text-align: center; }\n      .table td.tinytable_css_5qsollvhdpqb8fv3lmgc, .table th.tinytable_css_5qsollvhdpqb8fv3lmgc { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_uzesvz2qtham88urk4kw, .table th.tinytable_css_uzesvz2qtham88urk4kw { text-align: left; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_8b7o4xk07313c4qkoodi, .table th.tinytable_css_8b7o4xk07313c4qkoodi { text-align: left; }\n      .table td.tinytable_css_1lj8gv8k8us8lgs0b6n9, .table th.tinytable_css_1lj8gv8k8us8lgs0b6n9 { text-align: left; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_98ha30h5r0fca2sek6f2\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\"> </th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">(1)</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"2\">(2)</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"3\">(3)</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"4\">(4)</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">(Intercept)</td>\n                  <td data-row=\"1\" data-col=\"1\">47.568</td>\n                  <td data-row=\"1\" data-col=\"2\">47.568</td>\n                  <td data-row=\"1\" data-col=\"3\">0.369</td>\n                  <td data-row=\"1\" data-col=\"4\">11.223</td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\"></td>\n                  <td data-row=\"2\" data-col=\"1\">(0.272)</td>\n                  <td data-row=\"2\" data-col=\"2\">(0.273)</td>\n                  <td data-row=\"2\" data-col=\"3\">(4.661)</td>\n                  <td data-row=\"2\" data-col=\"4\">(4.436)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">speciesAdelie</td>\n                  <td data-row=\"3\" data-col=\"1\">-8.744</td>\n                  <td data-row=\"3\" data-col=\"2\">-8.593</td>\n                  <td data-row=\"3\" data-col=\"3\">-2.849</td>\n                  <td data-row=\"3\" data-col=\"4\">-2.021</td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\"></td>\n                  <td data-row=\"4\" data-col=\"1\">(0.367)</td>\n                  <td data-row=\"4\" data-col=\"2\">(0.525)</td>\n                  <td data-row=\"4\" data-col=\"3\">(0.664)</td>\n                  <td data-row=\"4\" data-col=\"4\">(0.612)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"5\" data-col=\"0\">speciesChinstrap</td>\n                  <td data-row=\"5\" data-col=\"1\">1.266</td>\n                  <td data-row=\"5\" data-col=\"2\">1.721</td>\n                  <td data-row=\"5\" data-col=\"3\">5.918</td>\n                  <td data-row=\"5\" data-col=\"4\">7.344</td>\n                </tr>\n                <tr>\n                  <td data-row=\"6\" data-col=\"0\"></td>\n                  <td data-row=\"6\" data-col=\"1\">(0.452)</td>\n                  <td data-row=\"6\" data-col=\"2\">(0.753)</td>\n                  <td data-row=\"6\" data-col=\"3\">(0.605)</td>\n                  <td data-row=\"6\" data-col=\"4\">(0.577)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"7\" data-col=\"0\">islandDream</td>\n                  <td data-row=\"7\" data-col=\"1\"></td>\n                  <td data-row=\"7\" data-col=\"2\">-0.455</td>\n                  <td data-row=\"7\" data-col=\"3\"></td>\n                  <td data-row=\"7\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"8\" data-col=\"0\"></td>\n                  <td data-row=\"8\" data-col=\"1\"></td>\n                  <td data-row=\"8\" data-col=\"2\">(0.602)</td>\n                  <td data-row=\"8\" data-col=\"3\"></td>\n                  <td data-row=\"8\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"9\" data-col=\"0\">islandTorgersen</td>\n                  <td data-row=\"9\" data-col=\"1\"></td>\n                  <td data-row=\"9\" data-col=\"2\">0.063</td>\n                  <td data-row=\"9\" data-col=\"3\"></td>\n                  <td data-row=\"9\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"10\" data-col=\"0\"></td>\n                  <td data-row=\"10\" data-col=\"1\"></td>\n                  <td data-row=\"10\" data-col=\"2\">(0.624)</td>\n                  <td data-row=\"10\" data-col=\"3\"></td>\n                  <td data-row=\"10\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"11\" data-col=\"0\">flipper_length_mm</td>\n                  <td data-row=\"11\" data-col=\"1\"></td>\n                  <td data-row=\"11\" data-col=\"2\"></td>\n                  <td data-row=\"11\" data-col=\"3\">0.217</td>\n                  <td data-row=\"11\" data-col=\"4\">0.099</td>\n                </tr>\n                <tr>\n                  <td data-row=\"12\" data-col=\"0\"></td>\n                  <td data-row=\"12\" data-col=\"1\"></td>\n                  <td data-row=\"12\" data-col=\"2\"></td>\n                  <td data-row=\"12\" data-col=\"3\">(0.021)</td>\n                  <td data-row=\"12\" data-col=\"4\">(0.024)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"13\" data-col=\"0\">body_mass_g</td>\n                  <td data-row=\"13\" data-col=\"1\"></td>\n                  <td data-row=\"13\" data-col=\"2\"></td>\n                  <td data-row=\"13\" data-col=\"3\"></td>\n                  <td data-row=\"13\" data-col=\"4\">0.003</td>\n                </tr>\n                <tr>\n                  <td data-row=\"14\" data-col=\"0\"></td>\n                  <td data-row=\"14\" data-col=\"1\"></td>\n                  <td data-row=\"14\" data-col=\"2\"></td>\n                  <td data-row=\"14\" data-col=\"3\"></td>\n                  <td data-row=\"14\" data-col=\"4\">(0.000)</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n## Polynomials\n\nSometimes the we suspect the effect of a variable on the outcome is not linear. To allow nonlinear effects, we can include polynomial terms of the predictor in the design matrix. For example, we can use the quadratic model\n\n$$\n\\mu_i = \\beta_0 + \\beta_1 x_i + \\beta_2 x_i^2.\n$$\n\nHere the effect of $x_i$ depends on its value---$\\frac{d \\mu_i}{d x_i} = \\beta_1 + 2\\beta_2 x_i$. We can build the design matrix easily with formulas and the `poly()` function.\n\n### Orthogonal and raw polynomials\n\nThe function `poly()` creates polynomial terms. By default, it produces *orthogonal polynomials*, which are linear combinations of $x, x^2, x^3, ...$, that are uncorrelated.[^poly-footnote] If we set `raw = TRUE`, `poly()` returns the raw powers of $x$ (i.e, $x = 3$ becomes $x^2 = 9$). The raw powers are easier to interpret directly when they appear in regression tables but can sometimes cause problems for computation.\n\n**Recommendation:** I recommend using `raw = TRUE` if you are reporting results in a regression table, unless these cause numerical problems. However, it usually doesn't matter. First, we *usually* process our results in a way that means our interpretation is the same with `raw = FALSE` and `raw = TRUE`. Second, numerical routines are really good, so `raw = FALSE` doesn't usually lead to problems.\n\n[^poly-footnote]: These uncorrelated variables are created using the Gram–Schmidt process. Orthogonal polynomials are helpful because they reduce multicollinearity. Less multicollinearly makes numerical optimization routines (e.g., Newton–Raphson) more robust and MCMC samplers mix more efficiently. Raw powers can lead to high multicollinearity and cause problems for our computational procedures. However, these transformed variables do not have the same interpretation.  \n\n### `model.matrix()` examples\n\nLet's look at orthogonal and raw polynomials using `flipper_length_mm`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# orthogonal\nf <- ~ poly(flipper_length_mm, 2)\nX <- model.matrix(f, data = penguins)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) poly(flipper_length_mm, 2)1 poly(flipper_length_mm, 2)2\n1           1                 -0.07818550                 0.089041829\n2           1                 -0.05860679                 0.030341919\n3           1                 -0.02336511                -0.038291958\n4           1                 -0.03119659                -0.027153981\n5           1                 -0.04294382                -0.006039163\n6           1                 -0.07818550                 0.089041829\n```\n\n\n:::\n\n```{.r .cell-code}\n# raw\nf <- ~ poly(flipper_length_mm, 2, raw = TRUE)\nX <- model.matrix(f, data = penguins)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) poly(flipper_length_mm, 2, raw = TRUE)1\n1           1                                     181\n2           1                                     186\n3           1                                     195\n4           1                                     193\n5           1                                     190\n6           1                                     181\n  poly(flipper_length_mm, 2, raw = TRUE)2\n1                                   32761\n2                                   34596\n3                                   38025\n4                                   37249\n5                                   36100\n6                                   32761\n```\n\n\n:::\n:::\n\n\n\n\nWith orthogonal polynomials, the columns are not $x$ and $x^2$ but to uncorrelated combinations of them. With raw polynomials, the columns are $x$ and $x^2$ exactly. \n\nHere's an example of a 4th-order polynomial.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# raw\nf <- ~ poly(flipper_length_mm, 4, raw = TRUE)\nX <- model.matrix(f, data = penguins)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) poly(flipper_length_mm, 4, raw = TRUE)1\n1           1                                     181\n2           1                                     186\n3           1                                     195\n4           1                                     193\n5           1                                     190\n6           1                                     181\n  poly(flipper_length_mm, 4, raw = TRUE)2\n1                                   32761\n2                                   34596\n3                                   38025\n4                                   37249\n5                                   36100\n6                                   32761\n  poly(flipper_length_mm, 4, raw = TRUE)3\n1                                 5929741\n2                                 6434856\n3                                 7414875\n4                                 7189057\n5                                 6859000\n6                                 5929741\n  poly(flipper_length_mm, 4, raw = TRUE)4\n1                              1073283121\n2                              1196883216\n3                              1445900625\n4                              1387488001\n5                              1303210000\n6                              1073283121\n```\n\n\n:::\n:::\n\n\n\n\n### `lm()` examples\n\nAs familiar examples, here are a few models with factors `species` and `island` as predictors of `bill_length_mm`.\n\nAs familiar examples, here are a few `lm()` fits with both orthogonal and raw polynomials.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit1 <- lm(bill_length_mm ~ poly(flipper_length_mm, 2), data = penguins)\nfit2 <- lm(bill_length_mm ~ poly(flipper_length_mm, 3), data = penguins)\nfit3 <- lm(bill_length_mm ~ poly(flipper_length_mm, 2, raw = TRUE), data = penguins)\nfit4 <- lm(bill_length_mm ~ poly(flipper_length_mm, 3, raw = TRUE), data = penguins)\n\nmodelsummary(list(fit1, fit2, fit3, fit4), gof_map = NA)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_4jry9oyqp9oq2rdlq3bk(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_4jry9oyqp9oq2rdlq3bk\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function spanCell_4jry9oyqp9oq2rdlq3bk(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_4jry9oyqp9oq2rdlq3bk\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '22', j: 1 }, { i: '22', j: 2 }, { i: '22', j: 3 }, { i: '22', j: 4 },  ], css_id: 'tinytable_css_js9qadbpz86fqsonnoji',}, \n          { positions: [ { i: '1', j: 1 }, { i: '5', j: 1 }, { i: '2', j: 1 }, { i: '3', j: 1 }, { i: '8', j: 1 }, { i: '9', j: 1 }, { i: '6', j: 1 }, { i: '11', j: 1 }, { i: '12', j: 1 }, { i: '13', j: 1 }, { i: '14', j: 1 }, { i: '15', j: 1 }, { i: '16', j: 1 }, { i: '4', j: 1 }, { i: '18', j: 1 }, { i: '19', j: 1 }, { i: '7', j: 1 }, { i: '21', j: 1 }, { i: '12', j: 2 }, { i: '10', j: 1 }, { i: '1', j: 2 }, { i: '2', j: 2 }, { i: '3', j: 2 }, { i: '4', j: 2 }, { i: '5', j: 2 }, { i: '6', j: 2 }, { i: '17', j: 1 }, { i: '8', j: 2 }, { i: '9', j: 2 }, { i: '20', j: 1 }, { i: '11', j: 2 }, { i: '2', j: 3 }, { i: '13', j: 2 }, { i: '14', j: 2 }, { i: '15', j: 2 }, { i: '16', j: 2 }, { i: '17', j: 2 }, { i: '18', j: 2 }, { i: '19', j: 2 }, { i: '7', j: 2 }, { i: '21', j: 2 }, { i: '12', j: 3 }, { i: '10', j: 2 }, { i: '1', j: 3 }, { i: '15', j: 3 }, { i: '3', j: 3 }, { i: '4', j: 3 }, { i: '5', j: 3 }, { i: '6', j: 3 }, { i: '7', j: 3 }, { i: '8', j: 3 }, { i: '9', j: 3 }, { i: '20', j: 2 }, { i: '11', j: 3 }, { i: '2', j: 4 }, { i: '13', j: 3 }, { i: '14', j: 3 }, { i: '5', j: 4 }, { i: '16', j: 3 }, { i: '17', j: 3 }, { i: '18', j: 3 }, { i: '19', j: 3 }, { i: '20', j: 3 }, { i: '21', j: 3 }, { i: '12', j: 4 }, { i: '10', j: 3 }, { i: '1', j: 4 }, { i: '15', j: 4 }, { i: '3', j: 4 }, { i: '4', j: 4 }, { i: '18', j: 4 }, { i: '6', j: 4 }, { i: '7', j: 4 }, { i: '8', j: 4 }, { i: '9', j: 4 }, { i: '10', j: 4 }, { i: '11', j: 4 }, { i: '16', j: 4 }, { i: '13', j: 4 }, { i: '14', j: 4 }, { i: '19', j: 4 }, { i: '20', j: 4 }, { i: '17', j: 4 }, { i: '21', j: 4 },  ], css_id: 'tinytable_css_fhgbnn07v5p8fqosuxhn',}, \n          { positions: [ { i: '0', j: 1 }, { i: '0', j: 2 }, { i: '0', j: 3 }, { i: '0', j: 4 },  ], css_id: 'tinytable_css_zr10mlf48t0tcuvd35fl',}, \n          { positions: [ { i: '22', j: 0 },  ], css_id: 'tinytable_css_bqn7oaatu0uotzjtrrd4',}, \n          { positions: [ { i: '1', j: 0 }, { i: '2', j: 0 }, { i: '3', j: 0 }, { i: '4', j: 0 }, { i: '5', j: 0 }, { i: '6', j: 0 }, { i: '7', j: 0 }, { i: '8', j: 0 }, { i: '9', j: 0 }, { i: '10', j: 0 }, { i: '11', j: 0 }, { i: '12', j: 0 }, { i: '13', j: 0 }, { i: '14', j: 0 }, { i: '15', j: 0 }, { i: '16', j: 0 }, { i: '17', j: 0 }, { i: '18', j: 0 }, { i: '19', j: 0 }, { i: '20', j: 0 }, { i: '21', j: 0 },  ], css_id: 'tinytable_css_6zwkeaf0azx6f9eabgte',}, \n          { positions: [ { i: '0', j: 0 },  ], css_id: 'tinytable_css_71zx89lpendxlfceyxj5',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_4jry9oyqp9oq2rdlq3bk(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_js9qadbpz86fqsonnoji, .table th.tinytable_css_js9qadbpz86fqsonnoji { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_fhgbnn07v5p8fqosuxhn, .table th.tinytable_css_fhgbnn07v5p8fqosuxhn { text-align: center; }\n      .table td.tinytable_css_zr10mlf48t0tcuvd35fl, .table th.tinytable_css_zr10mlf48t0tcuvd35fl { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_bqn7oaatu0uotzjtrrd4, .table th.tinytable_css_bqn7oaatu0uotzjtrrd4 { text-align: left; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_6zwkeaf0azx6f9eabgte, .table th.tinytable_css_6zwkeaf0azx6f9eabgte { text-align: left; }\n      .table td.tinytable_css_71zx89lpendxlfceyxj5, .table th.tinytable_css_71zx89lpendxlfceyxj5 { text-align: left; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_4jry9oyqp9oq2rdlq3bk\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\"> </th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">(1)</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"2\">(2)</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"3\">(3)</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"4\">(4)</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">(Intercept)</td>\n                  <td data-row=\"1\" data-col=\"1\">43.993</td>\n                  <td data-row=\"1\" data-col=\"2\">43.993</td>\n                  <td data-row=\"1\" data-col=\"3\">-46.928</td>\n                  <td data-row=\"1\" data-col=\"4\">-182.782</td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\"></td>\n                  <td data-row=\"2\" data-col=\"1\">(0.227)</td>\n                  <td data-row=\"2\" data-col=\"2\">(0.228)</td>\n                  <td data-row=\"2\" data-col=\"3\">(50.349)</td>\n                  <td data-row=\"2\" data-col=\"4\">(613.541)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">poly(flipper_length_mm, 2)1</td>\n                  <td data-row=\"3\" data-col=\"1\">65.077</td>\n                  <td data-row=\"3\" data-col=\"2\"></td>\n                  <td data-row=\"3\" data-col=\"3\"></td>\n                  <td data-row=\"3\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\"></td>\n                  <td data-row=\"4\" data-col=\"1\">(4.150)</td>\n                  <td data-row=\"4\" data-col=\"2\"></td>\n                  <td data-row=\"4\" data-col=\"3\"></td>\n                  <td data-row=\"4\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"5\" data-col=\"0\">poly(flipper_length_mm, 2)2</td>\n                  <td data-row=\"5\" data-col=\"1\">-3.280</td>\n                  <td data-row=\"5\" data-col=\"2\"></td>\n                  <td data-row=\"5\" data-col=\"3\"></td>\n                  <td data-row=\"5\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"6\" data-col=\"0\"></td>\n                  <td data-row=\"6\" data-col=\"1\">(4.150)</td>\n                  <td data-row=\"6\" data-col=\"2\"></td>\n                  <td data-row=\"6\" data-col=\"3\"></td>\n                  <td data-row=\"6\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"7\" data-col=\"0\">poly(flipper_length_mm, 3)1</td>\n                  <td data-row=\"7\" data-col=\"1\"></td>\n                  <td data-row=\"7\" data-col=\"2\">65.077</td>\n                  <td data-row=\"7\" data-col=\"3\"></td>\n                  <td data-row=\"7\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"8\" data-col=\"0\"></td>\n                  <td data-row=\"8\" data-col=\"1\"></td>\n                  <td data-row=\"8\" data-col=\"2\">(4.156)</td>\n                  <td data-row=\"8\" data-col=\"3\"></td>\n                  <td data-row=\"8\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"9\" data-col=\"0\">poly(flipper_length_mm, 3)2</td>\n                  <td data-row=\"9\" data-col=\"1\"></td>\n                  <td data-row=\"9\" data-col=\"2\">-3.280</td>\n                  <td data-row=\"9\" data-col=\"3\"></td>\n                  <td data-row=\"9\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"10\" data-col=\"0\"></td>\n                  <td data-row=\"10\" data-col=\"1\"></td>\n                  <td data-row=\"10\" data-col=\"2\">(4.156)</td>\n                  <td data-row=\"10\" data-col=\"3\"></td>\n                  <td data-row=\"10\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"11\" data-col=\"0\">poly(flipper_length_mm, 3)3</td>\n                  <td data-row=\"11\" data-col=\"1\"></td>\n                  <td data-row=\"11\" data-col=\"2\">0.923</td>\n                  <td data-row=\"11\" data-col=\"3\"></td>\n                  <td data-row=\"11\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"12\" data-col=\"0\"></td>\n                  <td data-row=\"12\" data-col=\"1\"></td>\n                  <td data-row=\"12\" data-col=\"2\">(4.156)</td>\n                  <td data-row=\"12\" data-col=\"3\"></td>\n                  <td data-row=\"12\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"13\" data-col=\"0\">poly(flipper_length_mm, 2, raw = TRUE)1</td>\n                  <td data-row=\"13\" data-col=\"1\"></td>\n                  <td data-row=\"13\" data-col=\"2\"></td>\n                  <td data-row=\"13\" data-col=\"3\">0.647</td>\n                  <td data-row=\"13\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"14\" data-col=\"0\"></td>\n                  <td data-row=\"14\" data-col=\"1\"></td>\n                  <td data-row=\"14\" data-col=\"2\"></td>\n                  <td data-row=\"14\" data-col=\"3\">(0.497)</td>\n                  <td data-row=\"14\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"15\" data-col=\"0\">poly(flipper_length_mm, 2, raw = TRUE)2</td>\n                  <td data-row=\"15\" data-col=\"1\"></td>\n                  <td data-row=\"15\" data-col=\"2\"></td>\n                  <td data-row=\"15\" data-col=\"3\">-0.001</td>\n                  <td data-row=\"15\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"16\" data-col=\"0\"></td>\n                  <td data-row=\"16\" data-col=\"1\"></td>\n                  <td data-row=\"16\" data-col=\"2\"></td>\n                  <td data-row=\"16\" data-col=\"3\">(0.001)</td>\n                  <td data-row=\"16\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"17\" data-col=\"0\">poly(flipper_length_mm, 3, raw = TRUE)1</td>\n                  <td data-row=\"17\" data-col=\"1\"></td>\n                  <td data-row=\"17\" data-col=\"2\"></td>\n                  <td data-row=\"17\" data-col=\"3\"></td>\n                  <td data-row=\"17\" data-col=\"4\">2.665</td>\n                </tr>\n                <tr>\n                  <td data-row=\"18\" data-col=\"0\"></td>\n                  <td data-row=\"18\" data-col=\"1\"></td>\n                  <td data-row=\"18\" data-col=\"2\"></td>\n                  <td data-row=\"18\" data-col=\"3\"></td>\n                  <td data-row=\"18\" data-col=\"4\">(9.097)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"19\" data-col=\"0\">poly(flipper_length_mm, 3, raw = TRUE)2</td>\n                  <td data-row=\"19\" data-col=\"1\"></td>\n                  <td data-row=\"19\" data-col=\"2\"></td>\n                  <td data-row=\"19\" data-col=\"3\"></td>\n                  <td data-row=\"19\" data-col=\"4\">-0.011</td>\n                </tr>\n                <tr>\n                  <td data-row=\"20\" data-col=\"0\"></td>\n                  <td data-row=\"20\" data-col=\"1\"></td>\n                  <td data-row=\"20\" data-col=\"2\"></td>\n                  <td data-row=\"20\" data-col=\"3\"></td>\n                  <td data-row=\"20\" data-col=\"4\">(0.045)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"21\" data-col=\"0\">poly(flipper_length_mm, 3, raw = TRUE)3</td>\n                  <td data-row=\"21\" data-col=\"1\"></td>\n                  <td data-row=\"21\" data-col=\"2\"></td>\n                  <td data-row=\"21\" data-col=\"3\"></td>\n                  <td data-row=\"21\" data-col=\"4\">0.000</td>\n                </tr>\n                <tr>\n                  <td data-row=\"22\" data-col=\"0\"></td>\n                  <td data-row=\"22\" data-col=\"1\"></td>\n                  <td data-row=\"22\" data-col=\"2\"></td>\n                  <td data-row=\"22\" data-col=\"3\"></td>\n                  <td data-row=\"22\" data-col=\"4\">(0.000)</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n\nNote that while the raw and orthogonal polynomial terms have different coefficients, they produce the exact same estimates of $\\mu$. And they produce the exact same estimates of $d \\mu / d x_i$, though we have to transform the estimates to get $x_i$ back to its original scale (R can do this for us).\n\n## Interactions\n\nWe can also use formulas to create interactions [@Brambor2006]. In scalar form, we typically use the specification\n$$\n\\mu_i =\\; \\beta_0 + \\beta_1 x_{i1} + \\beta_2 x_{i2} + \\beta_3 x_{i1}x_{i2}\n$$\nto model interactions so that the effect of $x_{i1}$ depends on $x_{i2}$ (and vice versa).  \n\nR provides three operators for interactions: \n\n- `:` includes only the product of two variables.  \n- `*` expands to the main effects and their interaction.  \n- `^` expands to all interactions up to a given order.  \n\n### `model.matrix()` examples\n\n#### Two numeric variables\n\nFirst, consider two numeric predictors.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- ~ flipper_length_mm * body_mass_g\nX <- model.matrix(f, data = penguins)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) flipper_length_mm body_mass_g flipper_length_mm:body_mass_g\n1           1               181        3750                        678750\n2           1               186        3800                        706800\n3           1               195        3250                        633750\n4           1               193        3450                        665850\n5           1               190        3650                        693500\n6           1               181        3625                        656125\n```\n\n\n:::\n:::\n\n\n\n\nThis creates columns for `flipper_length_mm`, `body_mass_g`, and their product. The coefficient on the product term shows how the slope of one variable depends on the other.  \n\nWe wouldn't (usually) want to do this, but we can also include only the product, leaving out main effects.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- ~ flipper_length_mm:body_mass_g\nX <- model.matrix(f, data = penguins)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) flipper_length_mm:body_mass_g\n1           1                        678750\n2           1                        706800\n3           1                        633750\n4           1                        665850\n5           1                        693500\n6           1                        656125\n```\n\n\n:::\n:::\n\n\n\n\nOr we could include only one of the main effects.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- ~ flipper_length_mm + flipper_length_mm:body_mass_g\nX <- model.matrix(f, data = penguins)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) flipper_length_mm flipper_length_mm:body_mass_g\n1           1               181                        678750\n2           1               186                        706800\n3           1               195                        633750\n4           1               193                        665850\n5           1               190                        693500\n6           1               181                        656125\n```\n\n\n:::\n:::\n\n\n\n\n#### Numeric and factor variable\n\nWe can also interact factor and numeric variables. For example, we can interact `flipper_length_mm` with `species`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(penguins$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Gentoo\"    \"Adelie\"    \"Chinstrap\"\n```\n\n\n:::\n\n```{.r .cell-code}\nf <- ~ flipper_length_mm * species\nX <- model.matrix(f, data = penguins)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) flipper_length_mm speciesAdelie speciesChinstrap\n1           1               181             1                0\n2           1               186             1                0\n3           1               195             1                0\n4           1               193             1                0\n5           1               190             1                0\n6           1               181             1                0\n  flipper_length_mm:speciesAdelie flipper_length_mm:speciesChinstrap\n1                             181                                  0\n2                             186                                  0\n3                             195                                  0\n4                             193                                  0\n5                             190                                  0\n6                             181                                  0\n```\n\n\n:::\n:::\n\n\n\n\nHere the design matrix allows separate slopes for each species. The dummy variables for `species` adjust the intercepts, and the product terms adjust the slopes.  \n\n#### Two factor variables\n\nFinally, we can interact two factors, such as `species` and `island`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(penguins$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Gentoo\"    \"Adelie\"    \"Chinstrap\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlevels(penguins$island)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Biscoe\"    \"Dream\"     \"Torgersen\"\n```\n\n\n:::\n\n```{.r .cell-code}\nf <- ~ species * island\nX <- model.matrix(f, data = penguins)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) speciesAdelie speciesChinstrap islandDream islandTorgersen\n1           1             1                0           0               1\n2           1             1                0           0               1\n3           1             1                0           0               1\n4           1             1                0           0               1\n5           1             1                0           0               1\n6           1             1                0           0               1\n  speciesAdelie:islandDream speciesChinstrap:islandDream\n1                         0                            0\n2                         0                            0\n3                         0                            0\n4                         0                            0\n5                         0                            0\n6                         0                            0\n  speciesAdelie:islandTorgersen speciesChinstrap:islandTorgersen\n1                             1                                0\n2                             1                                0\n3                             1                                0\n4                             1                                0\n5                             1                                0\n6                             1                                0\n```\n\n\n:::\n:::\n\n\n\n\nThis creates dummy variables for both main effects and for combinations of levels across the two factors.  \n\nRemember: When the models get complicated, you can take a first derivative to understand the meaning of the coefficients. For example, the effect of `speciesChinstrap` is $\\beta_2 + \\beta_6 \\texttt{islandDream} + \\beta_8 \\texttt{islandTorgerson}$. This means that the effect is $\\beta_2$ for penguins on Biscoe (the reference island), $\\beta_2 + \\beta_6$ for penguins on Dream, and $\\beta_2 + \\beta_8$ for penguins on Torgerson.\n\n### `lm()` examples\n\nAs familiar examples, here are a few `lm()` fits with interactions predicting `bill_length_mm`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# numeric × numeric\nfit1 <- lm(bill_length_mm ~ flipper_length_mm * body_mass_g, data = penguins)\n\n# numeric × factor\nfit2 <- lm(bill_length_mm ~ flipper_length_mm * species, data = penguins)\n\n# factor × factor\nfit3 <- lm(bill_length_mm ~ species * island, data = penguins)\n\n# richer example\nfit4 <- lm(bill_length_mm ~ (flipper_length_mm + body_mass_g + bill_depth_mm)^2, data = penguins)\n\nmodelsummary(list(fit1, fit2, fit3, fit4), gof_map = NA)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_udvthnvcvjhn71qe1bvf(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_udvthnvcvjhn71qe1bvf\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function spanCell_udvthnvcvjhn71qe1bvf(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_udvthnvcvjhn71qe1bvf\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '26', j: 3 }, { i: '26', j: 2 }, { i: '26', j: 1 }, { i: '26', j: 4 },  ], css_id: 'tinytable_css_ro0pjj1ahv0ag41qlm3o',}, \n          { positions: [ { i: '4', j: 1 }, { i: '5', j: 1 }, { i: '2', j: 1 }, { i: '3', j: 1 }, { i: '8', j: 1 }, { i: '9', j: 1 }, { i: '6', j: 1 }, { i: '7', j: 1 }, { i: '12', j: 1 }, { i: '13', j: 1 }, { i: '10', j: 1 }, { i: '11', j: 1 }, { i: '16', j: 1 }, { i: '17', j: 1 }, { i: '18', j: 1 }, { i: '15', j: 1 }, { i: '20', j: 1 }, { i: '21', j: 1 }, { i: '22', j: 1 }, { i: '19', j: 1 }, { i: '24', j: 1 }, { i: '25', j: 1 }, { i: '12', j: 3 }, { i: '23', j: 1 }, { i: '1', j: 2 }, { i: '2', j: 2 }, { i: '3', j: 2 }, { i: '4', j: 2 }, { i: '5', j: 2 }, { i: '6', j: 2 }, { i: '7', j: 2 }, { i: '8', j: 2 }, { i: '9', j: 2 }, { i: '10', j: 2 }, { i: '11', j: 2 }, { i: '12', j: 2 }, { i: '13', j: 2 }, { i: '1', j: 1 }, { i: '15', j: 2 }, { i: '16', j: 2 }, { i: '17', j: 2 }, { i: '18', j: 2 }, { i: '19', j: 2 }, { i: '20', j: 2 }, { i: '21', j: 2 }, { i: '22', j: 2 }, { i: '23', j: 2 }, { i: '24', j: 2 }, { i: '25', j: 2 }, { i: '12', j: 4 }, { i: '14', j: 1 }, { i: '1', j: 3 }, { i: '2', j: 3 }, { i: '3', j: 3 }, { i: '4', j: 3 }, { i: '5', j: 3 }, { i: '6', j: 3 }, { i: '7', j: 3 }, { i: '8', j: 3 }, { i: '9', j: 3 }, { i: '10', j: 3 }, { i: '11', j: 3 }, { i: '25', j: 4 }, { i: '13', j: 3 }, { i: '14', j: 3 }, { i: '15', j: 3 }, { i: '16', j: 3 }, { i: '17', j: 3 }, { i: '18', j: 3 }, { i: '19', j: 3 }, { i: '20', j: 3 }, { i: '21', j: 3 }, { i: '22', j: 3 }, { i: '23', j: 3 }, { i: '24', j: 3 }, { i: '25', j: 3 }, { i: '3', j: 4 }, { i: '14', j: 2 }, { i: '1', j: 4 }, { i: '2', j: 4 }, { i: '7', j: 4 }, { i: '4', j: 4 }, { i: '5', j: 4 }, { i: '6', j: 4 }, { i: '11', j: 4 }, { i: '8', j: 4 }, { i: '9', j: 4 }, { i: '10', j: 4 }, { i: '15', j: 4 }, { i: '16', j: 4 }, { i: '13', j: 4 }, { i: '14', j: 4 }, { i: '19', j: 4 }, { i: '20', j: 4 }, { i: '17', j: 4 }, { i: '18', j: 4 }, { i: '23', j: 4 }, { i: '24', j: 4 }, { i: '21', j: 4 }, { i: '22', j: 4 },  ], css_id: 'tinytable_css_j3mi4j94lwaxd324tddh',}, \n          { positions: [ { i: '0', j: 1 }, { i: '0', j: 4 }, { i: '0', j: 3 }, { i: '0', j: 2 },  ], css_id: 'tinytable_css_cerlo4ds1tea83v4uncg',}, \n          { positions: [ { i: '26', j: 0 },  ], css_id: 'tinytable_css_mw46rw0bdx1d5gnuizac',}, \n          { positions: [ { i: '1', j: 0 }, { i: '2', j: 0 }, { i: '3', j: 0 }, { i: '4', j: 0 }, { i: '5', j: 0 }, { i: '6', j: 0 }, { i: '7', j: 0 }, { i: '8', j: 0 }, { i: '9', j: 0 }, { i: '10', j: 0 }, { i: '11', j: 0 }, { i: '12', j: 0 }, { i: '13', j: 0 }, { i: '14', j: 0 }, { i: '15', j: 0 }, { i: '16', j: 0 }, { i: '17', j: 0 }, { i: '18', j: 0 }, { i: '19', j: 0 }, { i: '20', j: 0 }, { i: '21', j: 0 }, { i: '22', j: 0 }, { i: '23', j: 0 }, { i: '24', j: 0 }, { i: '25', j: 0 },  ], css_id: 'tinytable_css_5sabqk19rtnl59gdngxx',}, \n          { positions: [ { i: '0', j: 0 },  ], css_id: 'tinytable_css_f3j5q0x64sbzh5shfrlg',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_udvthnvcvjhn71qe1bvf(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_ro0pjj1ahv0ag41qlm3o, .table th.tinytable_css_ro0pjj1ahv0ag41qlm3o { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_j3mi4j94lwaxd324tddh, .table th.tinytable_css_j3mi4j94lwaxd324tddh { text-align: center; }\n      .table td.tinytable_css_cerlo4ds1tea83v4uncg, .table th.tinytable_css_cerlo4ds1tea83v4uncg { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_mw46rw0bdx1d5gnuizac, .table th.tinytable_css_mw46rw0bdx1d5gnuizac { text-align: left; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_5sabqk19rtnl59gdngxx, .table th.tinytable_css_5sabqk19rtnl59gdngxx { text-align: left; }\n      .table td.tinytable_css_f3j5q0x64sbzh5shfrlg, .table th.tinytable_css_f3j5q0x64sbzh5shfrlg { text-align: left; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_udvthnvcvjhn71qe1bvf\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\"> </th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">(1)</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"2\">(2)</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"3\">(3)</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"4\">(4)</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">(Intercept)</td>\n                  <td data-row=\"1\" data-col=\"1\">-26.752</td>\n                  <td data-row=\"1\" data-col=\"2\">-20.488</td>\n                  <td data-row=\"1\" data-col=\"3\">47.568</td>\n                  <td data-row=\"1\" data-col=\"4\">139.367</td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\"></td>\n                  <td data-row=\"2\" data-col=\"1\">(21.149)</td>\n                  <td data-row=\"2\" data-col=\"2\">(7.757)</td>\n                  <td data-row=\"2\" data-col=\"3\">(0.273)</td>\n                  <td data-row=\"2\" data-col=\"4\">(59.166)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">flipper_length_mm</td>\n                  <td data-row=\"3\" data-col=\"1\">0.339</td>\n                  <td data-row=\"3\" data-col=\"2\">0.313</td>\n                  <td data-row=\"3\" data-col=\"3\"></td>\n                  <td data-row=\"3\" data-col=\"4\">-0.902</td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\"></td>\n                  <td data-row=\"4\" data-col=\"1\">(0.107)</td>\n                  <td data-row=\"4\" data-col=\"2\">(0.036)</td>\n                  <td data-row=\"4\" data-col=\"3\"></td>\n                  <td data-row=\"4\" data-col=\"4\">(0.343)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"5\" data-col=\"0\">body_mass_g</td>\n                  <td data-row=\"5\" data-col=\"1\">0.006</td>\n                  <td data-row=\"5\" data-col=\"2\"></td>\n                  <td data-row=\"5\" data-col=\"3\"></td>\n                  <td data-row=\"5\" data-col=\"4\">0.025</td>\n                </tr>\n                <tr>\n                  <td data-row=\"6\" data-col=\"0\"></td>\n                  <td data-row=\"6\" data-col=\"1\">(0.005)</td>\n                  <td data-row=\"6\" data-col=\"2\"></td>\n                  <td data-row=\"6\" data-col=\"3\"></td>\n                  <td data-row=\"6\" data-col=\"4\">(0.008)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"7\" data-col=\"0\">flipper_length_mm × body_mass_g</td>\n                  <td data-row=\"7\" data-col=\"1\">-0.000</td>\n                  <td data-row=\"7\" data-col=\"2\"></td>\n                  <td data-row=\"7\" data-col=\"3\"></td>\n                  <td data-row=\"7\" data-col=\"4\">-0.000</td>\n                </tr>\n                <tr>\n                  <td data-row=\"8\" data-col=\"0\"></td>\n                  <td data-row=\"8\" data-col=\"1\">(0.000)</td>\n                  <td data-row=\"8\" data-col=\"2\"></td>\n                  <td data-row=\"8\" data-col=\"3\"></td>\n                  <td data-row=\"8\" data-col=\"4\">(0.000)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"9\" data-col=\"0\">speciesAdelie</td>\n                  <td data-row=\"9\" data-col=\"1\"></td>\n                  <td data-row=\"9\" data-col=\"2\">33.524</td>\n                  <td data-row=\"9\" data-col=\"3\">-8.593</td>\n                  <td data-row=\"9\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"10\" data-col=\"0\"></td>\n                  <td data-row=\"10\" data-col=\"1\"></td>\n                  <td data-row=\"10\" data-col=\"2\">(9.920)</td>\n                  <td data-row=\"10\" data-col=\"3\">(0.525)</td>\n                  <td data-row=\"10\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"11\" data-col=\"0\">speciesChinstrap</td>\n                  <td data-row=\"11\" data-col=\"1\"></td>\n                  <td data-row=\"11\" data-col=\"2\">26.081</td>\n                  <td data-row=\"11\" data-col=\"3\">1.721</td>\n                  <td data-row=\"11\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"12\" data-col=\"0\"></td>\n                  <td data-row=\"12\" data-col=\"1\"></td>\n                  <td data-row=\"12\" data-col=\"2\">(11.559)</td>\n                  <td data-row=\"12\" data-col=\"3\">(0.753)</td>\n                  <td data-row=\"12\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"13\" data-col=\"0\">flipper_length_mm × speciesAdelie</td>\n                  <td data-row=\"13\" data-col=\"1\"></td>\n                  <td data-row=\"13\" data-col=\"2\">-0.178</td>\n                  <td data-row=\"13\" data-col=\"3\"></td>\n                  <td data-row=\"13\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"14\" data-col=\"0\"></td>\n                  <td data-row=\"14\" data-col=\"1\"></td>\n                  <td data-row=\"14\" data-col=\"2\">(0.048)</td>\n                  <td data-row=\"14\" data-col=\"3\"></td>\n                  <td data-row=\"14\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"15\" data-col=\"0\">flipper_length_mm × speciesChinstrap</td>\n                  <td data-row=\"15\" data-col=\"1\"></td>\n                  <td data-row=\"15\" data-col=\"2\">-0.092</td>\n                  <td data-row=\"15\" data-col=\"3\"></td>\n                  <td data-row=\"15\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"16\" data-col=\"0\"></td>\n                  <td data-row=\"16\" data-col=\"1\"></td>\n                  <td data-row=\"16\" data-col=\"2\">(0.056)</td>\n                  <td data-row=\"16\" data-col=\"3\"></td>\n                  <td data-row=\"16\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"17\" data-col=\"0\">islandDream</td>\n                  <td data-row=\"17\" data-col=\"1\"></td>\n                  <td data-row=\"17\" data-col=\"2\"></td>\n                  <td data-row=\"17\" data-col=\"3\">-0.455</td>\n                  <td data-row=\"17\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"18\" data-col=\"0\"></td>\n                  <td data-row=\"18\" data-col=\"1\"></td>\n                  <td data-row=\"18\" data-col=\"2\"></td>\n                  <td data-row=\"18\" data-col=\"3\">(0.602)</td>\n                  <td data-row=\"18\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"19\" data-col=\"0\">islandTorgersen</td>\n                  <td data-row=\"19\" data-col=\"1\"></td>\n                  <td data-row=\"19\" data-col=\"2\"></td>\n                  <td data-row=\"19\" data-col=\"3\">0.063</td>\n                  <td data-row=\"19\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"20\" data-col=\"0\"></td>\n                  <td data-row=\"20\" data-col=\"1\"></td>\n                  <td data-row=\"20\" data-col=\"2\"></td>\n                  <td data-row=\"20\" data-col=\"3\">(0.624)</td>\n                  <td data-row=\"20\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"21\" data-col=\"0\">bill_depth_mm</td>\n                  <td data-row=\"21\" data-col=\"1\"></td>\n                  <td data-row=\"21\" data-col=\"2\"></td>\n                  <td data-row=\"21\" data-col=\"3\"></td>\n                  <td data-row=\"21\" data-col=\"4\">-10.376</td>\n                </tr>\n                <tr>\n                  <td data-row=\"22\" data-col=\"0\"></td>\n                  <td data-row=\"22\" data-col=\"1\"></td>\n                  <td data-row=\"22\" data-col=\"2\"></td>\n                  <td data-row=\"22\" data-col=\"3\"></td>\n                  <td data-row=\"22\" data-col=\"4\">(3.328)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"23\" data-col=\"0\">flipper_length_mm × bill_depth_mm</td>\n                  <td data-row=\"23\" data-col=\"1\"></td>\n                  <td data-row=\"23\" data-col=\"2\"></td>\n                  <td data-row=\"23\" data-col=\"3\"></td>\n                  <td data-row=\"23\" data-col=\"4\">0.075</td>\n                </tr>\n                <tr>\n                  <td data-row=\"24\" data-col=\"0\"></td>\n                  <td data-row=\"24\" data-col=\"1\"></td>\n                  <td data-row=\"24\" data-col=\"2\"></td>\n                  <td data-row=\"24\" data-col=\"3\"></td>\n                  <td data-row=\"24\" data-col=\"4\">(0.020)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"25\" data-col=\"0\">body_mass_g × bill_depth_mm</td>\n                  <td data-row=\"25\" data-col=\"1\"></td>\n                  <td data-row=\"25\" data-col=\"2\"></td>\n                  <td data-row=\"25\" data-col=\"3\"></td>\n                  <td data-row=\"25\" data-col=\"4\">-0.001</td>\n                </tr>\n                <tr>\n                  <td data-row=\"26\" data-col=\"0\"></td>\n                  <td data-row=\"26\" data-col=\"1\"></td>\n                  <td data-row=\"26\" data-col=\"2\"></td>\n                  <td data-row=\"26\" data-col=\"3\"></td>\n                  <td data-row=\"26\" data-col=\"4\">(0.000)</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n\n## Transformations\n\nTransformations change how predictors enter the design matrix. In general, we can write\n$$\n\\mu_i = \\beta_0 + \\beta_1 g(x_i),\n$$\nwhere $g(\\cdot)$ is a transformation such as $\\log$, $\\sqrt{\\cdot}$, or squaring. Transformations can linearize nonlinear relationships, stabilize variance, or change interpretation.\n\n### Transformations that don't conflict with formula operators\n\nSome functions can be applied directly in a formula. For example, we can use the log or square-root functions.\n\nThe log is especially common. For the model\n$$\n\\mu_i = \\beta_0 + \\beta_1 \\log(x_i),\n$$\nthe marginal effect is $\\tfrac{d\\mu_i}{dx_i} = \\tfrac{\\beta_1}{x_i}$, which decreases in magnitude as $x_i$ grows.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- ~ log(flipper_length_mm)\nX <- model.matrix(f, data = penguins)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) log(flipper_length_mm)\n1           1               5.198497\n2           1               5.225747\n3           1               5.273000\n4           1               5.262690\n5           1               5.247024\n6           1               5.198497\n```\n\n\n:::\n:::\n\n\n\n\nThe square root can also be used directly. For the model\n$$\n\\mu_i = \\beta_0 + \\beta_1 \\sqrt{x_i},\n$$\nthe marginal effect is $\\tfrac{d\\mu_i}{dx_i} = \\tfrac{\\beta_1}{2\\sqrt{x_i}}$.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- ~ sqrt(flipper_length_mm)\nX <- model.matrix(f, data = penguins)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) sqrt(flipper_length_mm)\n1           1                13.45362\n2           1                13.63818\n3           1                13.96424\n4           1                13.89244\n5           1                13.78405\n6           1                13.45362\n```\n\n\n:::\n:::\n\n\n\n\n### Transformations that require `I()`\n\nImportantly, though, some symbols in formulas have special meaning. In formulas, `+` adds predictors, `-` removes predictors, `^` expands interactions up to a certain order, and `:` forms interactions. \n\nIf we want arithmetic version instead of the formula-operator version, we must wrap the expression in `I()`.\n\nFor example, to include a quadratic term, we write\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- ~ I(flipper_length_mm^2)\nX <- model.matrix(f, data = penguins)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) I(flipper_length_mm^2)\n1           1                  32761\n2           1                  34596\n3           1                  38025\n4           1                  37249\n5           1                  36100\n6           1                  32761\n```\n\n\n:::\n\n```{.r .cell-code}\nf <- ~ flipper_length_mm + I(flipper_length_mm^2)\nX <- model.matrix(f, data = penguins)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) flipper_length_mm I(flipper_length_mm^2)\n1           1               181                  32761\n2           1               186                  34596\n3           1               195                  38025\n4           1               193                  37249\n5           1               190                  36100\n6           1               181                  32761\n```\n\n\n:::\n:::\n\n\n\n\n::: callout-warning\n\nIf not wrapped in `I()`, then `flipper_length_mm^2` means \"all second-order interactions of these variables and their main effects.\" In this case, it's the single variable `flipper_length_mm`. **This is a pretty confusing result!**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- ~ flipper_length_mm^2\nX <- model.matrix(f, data = penguins)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) flipper_length_mm\n1           1               181\n2           1               186\n3           1               195\n4           1               193\n5           1               190\n6           1               181\n```\n\n\n:::\n:::\n\n\n\n:::\n\nThe `I()` function can also force R to treat sums and differences literally. For example, the formula below creates one coefficient for the sum of flipper length and body mass.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- ~ I(flipper_length_mm + body_mass_g)\nX <- model.matrix(f, data = penguins)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) I(flipper_length_mm + body_mass_g)\n1           1                               3931\n2           1                               3986\n3           1                               3445\n4           1                               3643\n5           1                               3840\n6           1                               3806\n```\n\n\n:::\n:::\n\n\n\n\n\nWe can include multiple transformations at once.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- ~ log(flipper_length_mm) + I(flipper_length_mm^2) + sqrt(body_mass_g)\nX <- model.matrix(f, data = penguins)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) log(flipper_length_mm) I(flipper_length_mm^2) sqrt(body_mass_g)\n1           1               5.198497                  32761          61.23724\n2           1               5.225747                  34596          61.64414\n3           1               5.273000                  38025          57.00877\n4           1               5.262690                  37249          58.73670\n5           1               5.247024                  36100          60.41523\n6           1               5.198497                  32761          60.20797\n```\n\n\n:::\n:::\n\n\n\n\n### `lm()` examples\n\nAs familiar examples, here are a few `lm()` fits with transformations of predictors.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit1 <- lm(bill_length_mm ~ log(flipper_length_mm), data = penguins)\nfit2 <- lm(bill_length_mm ~ I(flipper_length_mm^2), data = penguins)\nfit3 <- lm(bill_length_mm ~ sqrt(flipper_length_mm), data = penguins)\nfit4 <- lm(bill_length_mm ~ log(flipper_length_mm) + I(flipper_length_mm^2) + sqrt(body_mass_g), data = penguins)\n\nmodelsummary(list(fit1, fit2, fit3, fit4), gof_map = NA)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_6qiki27jyj2r70m37zea(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_6qiki27jyj2r70m37zea\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function spanCell_6qiki27jyj2r70m37zea(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_6qiki27jyj2r70m37zea\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '10', j: 3 }, { i: '10', j: 1 }, { i: '10', j: 2 }, { i: '10', j: 4 },  ], css_id: 'tinytable_css_fp4gf2utbec9cgllvcco',}, \n          { positions: [ { i: '2', j: 1 }, { i: '4', j: 1 }, { i: '1', j: 1 }, { i: '6', j: 1 }, { i: '8', j: 1 }, { i: '5', j: 1 }, { i: '1', j: 3 }, { i: '3', j: 1 }, { i: '1', j: 2 }, { i: '2', j: 2 }, { i: '3', j: 2 }, { i: '4', j: 2 }, { i: '5', j: 2 }, { i: '6', j: 2 }, { i: '7', j: 2 }, { i: '8', j: 2 }, { i: '7', j: 1 }, { i: '1', j: 4 }, { i: '9', j: 1 }, { i: '3', j: 4 }, { i: '2', j: 3 }, { i: '3', j: 3 }, { i: '4', j: 3 }, { i: '5', j: 3 }, { i: '6', j: 3 }, { i: '7', j: 3 }, { i: '8', j: 3 }, { i: '9', j: 3 }, { i: '7', j: 4 }, { i: '9', j: 2 }, { i: '5', j: 4 }, { i: '2', j: 4 }, { i: '4', j: 4 }, { i: '9', j: 4 }, { i: '6', j: 4 }, { i: '8', j: 4 },  ], css_id: 'tinytable_css_ubd2xl639gp7gw53irnj',}, \n          { positions: [ { i: '0', j: 1 }, { i: '0', j: 3 }, { i: '0', j: 4 }, { i: '0', j: 2 },  ], css_id: 'tinytable_css_24b4kgyfn2uk53n8d5hb',}, \n          { positions: [ { i: '10', j: 0 },  ], css_id: 'tinytable_css_ptiglv76ltwh72ibz1sd',}, \n          { positions: [ { i: '1', j: 0 }, { i: '2', j: 0 }, { i: '3', j: 0 }, { i: '4', j: 0 }, { i: '5', j: 0 }, { i: '6', j: 0 }, { i: '7', j: 0 }, { i: '8', j: 0 }, { i: '9', j: 0 },  ], css_id: 'tinytable_css_aj4vpkfa3qgk8g9n3rhy',}, \n          { positions: [ { i: '0', j: 0 },  ], css_id: 'tinytable_css_thxm3z02to0y0jugrld7',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_6qiki27jyj2r70m37zea(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_fp4gf2utbec9cgllvcco, .table th.tinytable_css_fp4gf2utbec9cgllvcco { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_ubd2xl639gp7gw53irnj, .table th.tinytable_css_ubd2xl639gp7gw53irnj { text-align: center; }\n      .table td.tinytable_css_24b4kgyfn2uk53n8d5hb, .table th.tinytable_css_24b4kgyfn2uk53n8d5hb { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_ptiglv76ltwh72ibz1sd, .table th.tinytable_css_ptiglv76ltwh72ibz1sd { text-align: left; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_aj4vpkfa3qgk8g9n3rhy, .table th.tinytable_css_aj4vpkfa3qgk8g9n3rhy { text-align: left; }\n      .table td.tinytable_css_thxm3z02to0y0jugrld7, .table th.tinytable_css_thxm3z02to0y0jugrld7 { text-align: left; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_6qiki27jyj2r70m37zea\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\"> </th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">(1)</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"2\">(2)</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"3\">(3)</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"4\">(4)</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">(Intercept)</td>\n                  <td data-row=\"1\" data-col=\"1\">-230.169</td>\n                  <td data-row=\"1\" data-col=\"2\">18.649</td>\n                  <td data-row=\"1\" data-col=\"3\">-58.945</td>\n                  <td data-row=\"1\" data-col=\"4\">-345.868</td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\"></td>\n                  <td data-row=\"2\" data-col=\"1\">(17.441)</td>\n                  <td data-row=\"2\" data-col=\"2\">(1.637)</td>\n                  <td data-row=\"2\" data-col=\"3\">(6.556)</td>\n                  <td data-row=\"2\" data-col=\"4\">(244.273)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">log(flipper_length_mm)</td>\n                  <td data-row=\"3\" data-col=\"1\">51.721</td>\n                  <td data-row=\"3\" data-col=\"2\"></td>\n                  <td data-row=\"3\" data-col=\"3\"></td>\n                  <td data-row=\"3\" data-col=\"4\">75.246</td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\"></td>\n                  <td data-row=\"4\" data-col=\"1\">(3.290)</td>\n                  <td data-row=\"4\" data-col=\"2\"></td>\n                  <td data-row=\"4\" data-col=\"3\"></td>\n                  <td data-row=\"4\" data-col=\"4\">(50.714)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"5\" data-col=\"0\">I(flipper_length_mm^2)</td>\n                  <td data-row=\"5\" data-col=\"1\"></td>\n                  <td data-row=\"5\" data-col=\"2\">0.001</td>\n                  <td data-row=\"5\" data-col=\"3\"></td>\n                  <td data-row=\"5\" data-col=\"4\">-0.000</td>\n                </tr>\n                <tr>\n                  <td data-row=\"6\" data-col=\"0\"></td>\n                  <td data-row=\"6\" data-col=\"1\"></td>\n                  <td data-row=\"6\" data-col=\"2\">(0.000)</td>\n                  <td data-row=\"6\" data-col=\"3\"></td>\n                  <td data-row=\"6\" data-col=\"4\">(0.001)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"7\" data-col=\"0\">sqrt(flipper_length_mm)</td>\n                  <td data-row=\"7\" data-col=\"1\"></td>\n                  <td data-row=\"7\" data-col=\"2\"></td>\n                  <td data-row=\"7\" data-col=\"3\">7.266</td>\n                  <td data-row=\"7\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"8\" data-col=\"0\"></td>\n                  <td data-row=\"8\" data-col=\"1\"></td>\n                  <td data-row=\"8\" data-col=\"2\"></td>\n                  <td data-row=\"8\" data-col=\"3\">(0.462)</td>\n                  <td data-row=\"8\" data-col=\"4\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"9\" data-col=\"0\">sqrt(body_mass_g)</td>\n                  <td data-row=\"9\" data-col=\"1\"></td>\n                  <td data-row=\"9\" data-col=\"2\"></td>\n                  <td data-row=\"9\" data-col=\"3\"></td>\n                  <td data-row=\"9\" data-col=\"4\">0.097</td>\n                </tr>\n                <tr>\n                  <td data-row=\"10\" data-col=\"0\"></td>\n                  <td data-row=\"10\" data-col=\"1\"></td>\n                  <td data-row=\"10\" data-col=\"2\"></td>\n                  <td data-row=\"10\" data-col=\"3\"></td>\n                  <td data-row=\"10\" data-col=\"4\">(0.077)</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n\n## Updating Formulas\n\nSometimes we want to adjust an existing formula instead of rewriting it from scratch. The function `update()` makes this easy. It is especially useful when experimenting *changes* to a baseline specification.\n\nFor example, suppose we start with a model of `bill_length_mm` on `flipper_length_mm`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- bill_length_mm ~ flipper_length_mm\nfit1 <- lm(f, data = penguins)\n```\n:::\n\n\n\n\nWe can use `update()` to add or remove predictors. The special symbol `.` means \"keep everything else.\"\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add body_mass_g\nfit2 <- update(fit1, . ~ . + body_mass_g)\n\n# remove flipper_length_mm\nfit3 <- update(fit1, . ~ . - flipper_length_mm)\n\nmodelsummary(list(fit1, fit2, fit3), gof_map = NA)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_q92oiqgxfzt6ms91t939(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_q92oiqgxfzt6ms91t939\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function spanCell_q92oiqgxfzt6ms91t939(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_q92oiqgxfzt6ms91t939\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '6', j: 2 }, { i: '6', j: 1 }, { i: '6', j: 3 },  ], css_id: 'tinytable_css_1thowzoxea23s2ocxybm',}, \n          { positions: [ { i: '1', j: 1 }, { i: '4', j: 1 }, { i: '5', j: 1 }, { i: '2', j: 1 }, { i: '3', j: 1 }, { i: '1', j: 2 }, { i: '2', j: 2 }, { i: '3', j: 2 }, { i: '4', j: 2 }, { i: '5', j: 2 }, { i: '3', j: 3 }, { i: '4', j: 3 }, { i: '1', j: 3 }, { i: '2', j: 3 }, { i: '5', j: 3 },  ], css_id: 'tinytable_css_3d3yvp5xdzaro5hq405e',}, \n          { positions: [ { i: '0', j: 1 }, { i: '0', j: 3 }, { i: '0', j: 2 },  ], css_id: 'tinytable_css_8d2hnggbn3mb80unjn58',}, \n          { positions: [ { i: '6', j: 0 },  ], css_id: 'tinytable_css_baph5ldiskjkbbceqg8i',}, \n          { positions: [ { i: '1', j: 0 }, { i: '2', j: 0 }, { i: '3', j: 0 }, { i: '4', j: 0 }, { i: '5', j: 0 },  ], css_id: 'tinytable_css_ovx86flqu8ymb2kflw7y',}, \n          { positions: [ { i: '0', j: 0 },  ], css_id: 'tinytable_css_vc5b9u0aoo27w3vi9equ',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_q92oiqgxfzt6ms91t939(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_1thowzoxea23s2ocxybm, .table th.tinytable_css_1thowzoxea23s2ocxybm { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_3d3yvp5xdzaro5hq405e, .table th.tinytable_css_3d3yvp5xdzaro5hq405e { text-align: center; }\n      .table td.tinytable_css_8d2hnggbn3mb80unjn58, .table th.tinytable_css_8d2hnggbn3mb80unjn58 { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_baph5ldiskjkbbceqg8i, .table th.tinytable_css_baph5ldiskjkbbceqg8i { text-align: left; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_ovx86flqu8ymb2kflw7y, .table th.tinytable_css_ovx86flqu8ymb2kflw7y { text-align: left; }\n      .table td.tinytable_css_vc5b9u0aoo27w3vi9equ, .table th.tinytable_css_vc5b9u0aoo27w3vi9equ { text-align: left; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_q92oiqgxfzt6ms91t939\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\"> </th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">(1)</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"2\">(2)</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"3\">(3)</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">(Intercept)</td>\n                  <td data-row=\"1\" data-col=\"1\">-7.219</td>\n                  <td data-row=\"1\" data-col=\"2\">-3.981</td>\n                  <td data-row=\"1\" data-col=\"3\">43.993</td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\"></td>\n                  <td data-row=\"2\" data-col=\"1\">(3.272)</td>\n                  <td data-row=\"2\" data-col=\"2\">(4.722)</td>\n                  <td data-row=\"2\" data-col=\"3\">(0.300)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">flipper_length_mm</td>\n                  <td data-row=\"3\" data-col=\"1\">0.255</td>\n                  <td data-row=\"3\" data-col=\"2\">0.227</td>\n                  <td data-row=\"3\" data-col=\"3\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\"></td>\n                  <td data-row=\"4\" data-col=\"1\">(0.016)</td>\n                  <td data-row=\"4\" data-col=\"2\">(0.033)</td>\n                  <td data-row=\"4\" data-col=\"3\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"5\" data-col=\"0\">body_mass_g</td>\n                  <td data-row=\"5\" data-col=\"1\"></td>\n                  <td data-row=\"5\" data-col=\"2\">0.001</td>\n                  <td data-row=\"5\" data-col=\"3\"></td>\n                </tr>\n                <tr>\n                  <td data-row=\"6\" data-col=\"0\"></td>\n                  <td data-row=\"6\" data-col=\"1\"></td>\n                  <td data-row=\"6\" data-col=\"2\">(0.001)</td>\n                  <td data-row=\"6\" data-col=\"3\"></td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}