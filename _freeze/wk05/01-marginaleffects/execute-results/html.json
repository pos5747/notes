{
  "hash": "a84da371cb7775c3d11af76e6dfbb102",
  "result": {
    "engine": "knitr",
    "markdown": "# \\{marginaleffects\\}\n\nLet's have a look at the `turnout` dataset below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install jrnold's package from github\n# devtools::install_github(\"jrnold/ZeligData\")  # just run once\n\n# load packages\nlibrary(tidyverse)\n\n# load data\nturnout <- ZeligData::turnout  # see ?ZeligData::turnout for details\n\n# quick look\nglimpse(turnout)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,000\nColumns: 5\n$ race    <fct> white, white, white, white, white, white, white, white, white,…\n$ age     <int> 60, 51, 24, 38, 25, 67, 40, 56, 32, 75, 46, 52, 22, 60, 24, 30…\n$ educate <dbl> 14, 10, 12, 8, 12, 12, 12, 10, 12, 16, 15, 12, 12, 12, 14, 10,…\n$ income  <dbl> 3.3458, 1.8561, 0.6304, 3.4183, 2.7852, 2.3866, 4.2857, 9.3205…\n$ vote    <int> 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,…\n```\n\n\n:::\n:::\n\n\n\n\nAnd a logit model modeling the binary `vote` variable as a function of `age`, `educate`, `income`, and `race`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fit logit model\nf <- vote ~ age + educate + income + race\nfit <- glm(f, data = turnout, family = binomial)\n\n# print table\nmodelsummary::modelsummary(fit, gof_map = NA)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_9648mj5wsqocfbxtx08p(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_9648mj5wsqocfbxtx08p\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function spanCell_9648mj5wsqocfbxtx08p(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_9648mj5wsqocfbxtx08p\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '10', j: 1 },  ], css_id: 'tinytable_css_kr8u6r47wyy70b1wr5pi',}, \n          { positions: [ { i: '1', j: 1 }, { i: '2', j: 1 }, { i: '3', j: 1 }, { i: '4', j: 1 }, { i: '5', j: 1 }, { i: '6', j: 1 }, { i: '7', j: 1 }, { i: '8', j: 1 }, { i: '9', j: 1 },  ], css_id: 'tinytable_css_v98e1yczwspbjtgrwohc',}, \n          { positions: [ { i: '0', j: 1 },  ], css_id: 'tinytable_css_u40ob6cqhdqbn1okmqnp',}, \n          { positions: [ { i: '10', j: 0 },  ], css_id: 'tinytable_css_ic3tkbaln42makibw3z7',}, \n          { positions: [ { i: '1', j: 0 }, { i: '2', j: 0 }, { i: '3', j: 0 }, { i: '4', j: 0 }, { i: '5', j: 0 }, { i: '6', j: 0 }, { i: '7', j: 0 }, { i: '8', j: 0 }, { i: '9', j: 0 },  ], css_id: 'tinytable_css_oelohjhc0u24rld3hckl',}, \n          { positions: [ { i: '0', j: 0 },  ], css_id: 'tinytable_css_p8mu4pdwrb18vylbbmro',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_9648mj5wsqocfbxtx08p(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_kr8u6r47wyy70b1wr5pi, .table th.tinytable_css_kr8u6r47wyy70b1wr5pi { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_v98e1yczwspbjtgrwohc, .table th.tinytable_css_v98e1yczwspbjtgrwohc { text-align: center; }\n      .table td.tinytable_css_u40ob6cqhdqbn1okmqnp, .table th.tinytable_css_u40ob6cqhdqbn1okmqnp { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_ic3tkbaln42makibw3z7, .table th.tinytable_css_ic3tkbaln42makibw3z7 { text-align: left; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_oelohjhc0u24rld3hckl, .table th.tinytable_css_oelohjhc0u24rld3hckl { text-align: left; }\n      .table td.tinytable_css_p8mu4pdwrb18vylbbmro, .table th.tinytable_css_p8mu4pdwrb18vylbbmro { text-align: left; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_9648mj5wsqocfbxtx08p\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\"> </th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">(1)</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">(Intercept)</td>\n                  <td data-row=\"1\" data-col=\"1\">-3.034</td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\"></td>\n                  <td data-row=\"2\" data-col=\"1\">(0.326)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">age</td>\n                  <td data-row=\"3\" data-col=\"1\">0.028</td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\"></td>\n                  <td data-row=\"4\" data-col=\"1\">(0.003)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"5\" data-col=\"0\">educate</td>\n                  <td data-row=\"5\" data-col=\"1\">0.176</td>\n                </tr>\n                <tr>\n                  <td data-row=\"6\" data-col=\"0\"></td>\n                  <td data-row=\"6\" data-col=\"1\">(0.020)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"7\" data-col=\"0\">income</td>\n                  <td data-row=\"7\" data-col=\"1\">0.177</td>\n                </tr>\n                <tr>\n                  <td data-row=\"8\" data-col=\"0\"></td>\n                  <td data-row=\"8\" data-col=\"1\">(0.027)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"9\" data-col=\"0\">racewhite</td>\n                  <td data-row=\"9\" data-col=\"1\">0.251</td>\n                </tr>\n                <tr>\n                  <td data-row=\"10\" data-col=\"0\"></td>\n                  <td data-row=\"10\" data-col=\"1\">(0.146)</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n\nThese coefficients are not particularly interpretable, so we might want to compute quantities of interest.^[In political science, @King2000 prompted the focus on more interpretable quantities and I often borrow their langauge.]\n\nWe have learned that we can use the invariance property and the delta method as a very general way to compute almost any quantity of interest. The {marginaleffects} package in R exploits this generally to compute many quantities of interest, especially those that are involve $E(Y)$--like the commonly used expected value and first difference. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(marginaleffects)\n```\n:::\n\n\n\n\nWe'll focus on two main functions from {marginaleffects}: `predictions()` and `comparisons()`, as well as their `avg_*()` variants. Let's take a quick look at each.\n\n## Expected value → `predictions()`\n\nReminder: expected value = $E(y \\mid X_c)$, where $X_c$ is a carefully chosen covariate vector.\n\nBy default, `predictions()` generates an expected value for every row in the observed dataset. These expected vaues are stored in the `estimate` column of the output and it includes other commonly used values like the upper and lower bounds of the 95% confidence interval.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nev <- predictions(fit)\nglimpse(ev)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,000\nColumns: 12\n$ rowid     <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1…\n$ estimate  <dbl> 0.8775302, 0.6786731, 0.5290410, 0.5755400, 0.6286173, 0.838…\n$ p.value   <dbl> 3.090260e-72, 1.948825e-25, 3.272806e-01, 2.466941e-03, 2.09…\n$ s.value   <dbl> 237.5510944, 82.0855976, 1.6114001, 8.6630613, 28.8270054, 1…\n$ conf.low  <dbl> 0.8525216, 0.6472753, 0.4709367, 0.5268140, 0.5876069, 0.807…\n$ conf.high <dbl> 0.8988014, 0.7085345, 0.5863688, 0.6228407, 0.6678547, 0.864…\n$ race      <fct> white, white, white, white, white, white, white, white, whit…\n$ age       <int> 60, 51, 24, 38, 25, 67, 40, 56, 32, 75, 46, 52, 22, 60, 24, …\n$ educate   <dbl> 14, 10, 12, 8, 12, 12, 12, 10, 12, 16, 15, 12, 12, 12, 14, 1…\n$ income    <dbl> 3.3458, 1.8561, 0.6304, 3.4183, 2.7852, 2.3866, 4.2857, 9.32…\n$ vote      <int> 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, …\n$ df        <dbl> Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, …\n```\n\n\n:::\n:::\n\n\n\n\n## First difference → `comparisons()`\n\nReminder: first difference = $E(y \\mid X_{hi}) - E(y \\mid X_{lo})$, where $X_{hi}$ and $X_{lo}$ are a carefully chosen covariate vectors that fix on covariate of interest at a high value and low value respectively.\n\nB`comparisons()` computes these first differences\n\n1. Q: But what variable does it vary by default? A: All of them, one at a time! You'll usually want to pick one.\n1. Q: And what are the high and low values? A: It depends, but something somewhat reasonable. You'll almost always want to specify the one you want.\n\nBy default, `comparisons()` computes a first difference varying *each* variable from a low to a high value, while fixing every other variable to the observed values. \n\nThese expected values are stored in the `estimate` column of the output and it includes other commonly used values like the upper and lower bounds of the 95% confidence interval.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfd <- comparisons(fit)\nglimpse(fd)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 8,000\nColumns: 18\n$ rowid        <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ term         <chr> \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"…\n$ contrast     <chr> \"+1\", \"+1\", \"+1\", \"+1\", \"+1\", \"+1\", \"+1\", \"+1\", \"+1\", \"+1…\n$ estimate     <dbl> 0.003014792, 0.006151818, 0.007058384, 0.006911517, 0.006…\n$ std.error    <dbl> 0.0002549662, 0.0007409855, 0.0008934136, 0.0008993856, 0…\n$ statistic    <dbl> 11.824281, 8.302212, 7.900466, 7.684710, 7.211994, 12.732…\n$ p.value      <dbl> 2.923968e-32, 1.021909e-16, 2.778629e-15, 1.533439e-14, 5…\n$ s.value      <dbl> 104.75377, 53.11958, 48.35455, 45.89022, 40.72200, 120.95…\n$ conf.low     <dbl> 0.0025150671, 0.0046995135, 0.0053073252, 0.0051487540, 0…\n$ conf.high    <dbl> 0.003514516, 0.007604123, 0.008809442, 0.008674281, 0.008…\n$ race         <fct> white, white, white, white, white, white, white, white, w…\n$ age          <int> 60, 51, 24, 38, 25, 67, 40, 56, 32, 75, 46, 52, 22, 60, 2…\n$ educate      <dbl> 14, 10, 12, 8, 12, 12, 12, 10, 12, 16, 15, 12, 12, 12, 14…\n$ income       <dbl> 3.3458, 1.8561, 0.6304, 3.4183, 2.7852, 2.3866, 4.2857, 9…\n$ vote         <int> 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, …\n$ predicted_lo <dbl> 0.8775302, 0.6786731, 0.5290410, 0.5755400, 0.6286173, 0.…\n$ predicted_hi <dbl> 0.8805450, 0.6848249, 0.5360994, 0.5824515, 0.6352124, 0.…\n$ predicted    <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n```\n\n\n:::\n:::\n\n\n\n\n- For the numeric variables like `age`, `comparisons()` generates a first difference moving `age` from the observed value `age` to a high value `age + 1`. The variable `contrast` in the output specifies this comparison `+1`.\n- For the factor variable `race`, `comparisons()` generates a first difference moving `race` from the reference level to *each* other factor level. The variable `contrast` in the output specifies this comparison `white - others`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(fd$term, fd$contrast)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         \n            +1 white - others\n  age     2000              0\n  educate 2000              0\n  income  2000              0\n  race       0           2000\n```\n\n\n:::\n:::\n\n\n\n\nThus, by default, `comparisons()` gives us a data frame with the observed data repeated several times for several difference first differences. This is a reasonable default behavior, but we'll almost always want to compute something more specific (and avoid computing things we don't need).\n\n## Framework\n\nWhen we call `predictions()` or `comparisons()`, we are always making three choices: (1) the **quantity** we want, (2) the **grid** of predictor values where we want it, and (3) whether or not to **aggregate** across units (the idea of \"aggregation\" is new to us). These choices determine the estimand, and it is important to be explicit in writing and  thinking.\n\nHere's how @me describe these choices:\n\n1. *Quantity*: What is the quantity of interest? Do we want to report a expected value or a comparison of expected values (difference, ratio, derivative, etc.)?\n2. *Grid*: What predictor values are we interested in? Do we want to report estimates for the units in our dataset, or for hypothetical or representative individuals?\n3. *Aggregation*: Do we report estimates for every observation in the grid or a global summary?\n\n### Quantity\n\nFirst, we must choose our quantity of interest. Most generally, it can be \"whatever we want.\" But {marginaleffects} is *slightly* restrictive.\n\n#### What scale?\n\nFirst, we must choose the scale of the quantity of interest. For a logistic regression, we almost always want the probability scale (i.e., `\"response\"` scale). But we could also choose the linear predictor scale (i.e., `\"link\"` scale).\n\nWe make this choice with the `type=` argument:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# probability scale; default; almost always want this one\npredictions(fit, type = \"response\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n Estimate Std. Error     z Pr(>|z|)     S 2.5 % 97.5 %\n    0.878    0.01177  74.5   <0.001   Inf 0.854  0.901\n    0.679    0.01564  43.4   <0.001   Inf 0.648  0.709\n    0.529    0.02958  17.9   <0.001 235.3 0.471  0.587\n    0.576    0.02457  23.4   <0.001 400.7 0.527  0.624\n    0.629    0.02051  30.6   <0.001 682.7 0.588  0.669\n--- 1990 rows omitted. See ?print.marginaleffects ---\n    0.796    0.01718  46.4   <0.001   Inf 0.763  0.830\n    0.691    0.01476  46.8   <0.001   Inf 0.662  0.720\n    0.946    0.00795 119.0   <0.001   Inf 0.931  0.962\n    0.509    0.02763  18.4   <0.001 249.4 0.455  0.563\n    0.678    0.02135  31.7   <0.001 732.3 0.636  0.720\nType: response\n```\n\n\n:::\n\n```{.r .cell-code}\n# linear predictor scale; rarely use\npredictions(fit, type = \"link\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n Estimate Std. Error      z Pr(>|z|)     S  2.5 % 97.5 %\n   1.9692     0.1096 17.974  < 0.001 237.6  1.755  2.184\n   0.7477     0.0717 10.423  < 0.001  82.1  0.607  0.888\n   0.1163     0.1187  0.980  0.32728   1.6 -0.116  0.349\n   0.3045     0.1006  3.027  0.00247   8.7  0.107  0.502\n   0.5263     0.0879  5.990  < 0.001  28.8  0.354  0.698\n--- 1990 rows omitted. See ?print.marginaleffects ---\n   1.3631     0.1059 12.873  < 0.001 123.6  1.156  1.571\n   0.8048     0.0691 11.644  < 0.001 101.7  0.669  0.940\n   2.8710     0.1568 18.310  < 0.001 246.3  2.564  3.178\n   0.0361     0.1105  0.327  0.74398   0.4 -0.181  0.253\n   0.7436     0.0978  7.606  < 0.001  45.0  0.552  0.935\nType: link\n```\n\n\n:::\n:::\n\n\n\n\n#### Prediction or comparison?\n\nSecond, we must choose whether we want a prediction or a comparison. We make this choice by using `predictions()` or `comparisons()`.\n\nArel-Bundock et al. (2025) define a prediction as: \n\n> Predictions are the outcomes predicted by a fitted model on a specified scale for\na given combination of values of the predictor variables, such as their observed\nvalues, their means, or factor levels.\n\nBorrowing language from King et al. (2000), I refer the {marginaleffects}'s \"prediction\" as an \"expected value.\"\n\nThey define a comparison as: \n\n> Comparisons are functions of two or more predictions. Examples of comparisons\ninclude contrasts, differences, risk ratios, odds, lift, etc.\n\nThe \"first difference\" from King et al. (2000) is an example of a comparison--a \"difference\" in the quote above.\n\n#### What to compare?\n\nThird, if we choose to compare, we need to choose what to compare. This involves two choices. \n\n1. First, we need to choose a focal variable.\n1. We need to choose a \"high\" scenario and a \"low\" scenario.\n\nWe specify this focal variable and the scenarios with the `variables` argument to `comparisons()`. The `variables` argument is a *list* of focal variables and a specification of the high and low values. There are numerous convenient ways to specify the comparisons you want, see `?marginaleffects::comparisons` for details. I put a few common examples below for numeric variables. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# focal variable: `age`; high = age + 10; low = age\ncomparisons(fit, variables = list(age = 10)) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,000\nColumns: 18\n$ rowid        <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ term         <chr> \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"…\n$ contrast     <chr> \"+10\", \"+10\", \"+10\", \"+10\", \"+10\", \"+10\", \"+10\", \"+10\", \"…\n$ estimate     <dbl> 0.027360732, 0.058480001, 0.069607780, 0.067373982, 0.063…\n$ std.error    <dbl> 0.002096085, 0.006680299, 0.008968105, 0.008750418, 0.008…\n$ statistic    <dbl> 13.053255, 8.754100, 7.761704, 7.699516, 7.286021, 14.409…\n$ p.value      <dbl> 6.088899e-39, 2.057388e-18, 8.379572e-15, 1.365825e-14, 3…\n$ s.value      <dbl> 126.94901, 58.75389, 46.76204, 46.05722, 41.51041, 153.95…\n$ conf.low     <dbl> 0.023252481, 0.045386857, 0.052030616, 0.050223478, 0.046…\n$ conf.high    <dbl> 0.03146898, 0.07157315, 0.08718494, 0.08452449, 0.0805266…\n$ race         <fct> white, white, white, white, white, white, white, white, w…\n$ age          <int> 60, 51, 24, 38, 25, 67, 40, 56, 32, 75, 46, 52, 22, 60, 2…\n$ educate      <dbl> 14, 10, 12, 8, 12, 12, 12, 10, 12, 16, 15, 12, 12, 12, 14…\n$ income       <dbl> 3.3458, 1.8561, 0.6304, 3.4183, 2.7852, 2.3866, 4.2857, 9…\n$ vote         <int> 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, …\n$ predicted_lo <dbl> 0.8775302, 0.6786731, 0.5290410, 0.5755400, 0.6286173, 0.…\n$ predicted_hi <dbl> 0.9048910, 0.7371531, 0.5986488, 0.6429140, 0.6920739, 0.…\n$ predicted    <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n```\n\n\n:::\n\n```{.r .cell-code}\n#  high = 90; low = 18\ncomparisons(fit, variables = list(age = c(18, 90))) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,000\nColumns: 18\n$ rowid        <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ term         <chr> \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"…\n$ contrast     <chr> \"90 - 18\", \"90 - 18\", \"90 - 18\", \"90 - 18\", \"90 - 18\", \"9…\n$ estimate     <dbl> 0.25841282, 0.41140255, 0.39295205, 0.42083720, 0.3332314…\n$ std.error    <dbl> 0.02716613, 0.04374691, 0.04168724, 0.04639905, 0.0351402…\n$ statistic    <dbl> 9.512315, 9.404151, 9.426195, 9.069954, 9.482914, 9.48784…\n$ p.value      <dbl> 1.864654e-21, 5.245209e-21, 4.252375e-21, 1.190675e-19, 2…\n$ s.value      <dbl> 68.86158, 67.36949, 67.67222, 62.86485, 68.45434, 68.5226…\n$ conf.low     <dbl> 0.20516818, 0.32566018, 0.31124656, 0.32989674, 0.2643579…\n$ conf.high    <dbl> 0.3116575, 0.4971449, 0.4746575, 0.5117777, 0.4021050, 0.…\n$ race         <fct> white, white, white, white, white, white, white, white, w…\n$ age          <int> 60, 51, 24, 38, 25, 67, 40, 56, 32, 75, 46, 52, 22, 60, 2…\n$ educate      <dbl> 14, 10, 12, 8, 12, 12, 12, 10, 12, 16, 15, 12, 12, 12, 14…\n$ income       <dbl> 3.3458, 1.8561, 0.6304, 3.4183, 2.7852, 2.3866, 4.2857, 9…\n$ vote         <int> 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, …\n$ predicted_lo <dbl> 0.6853277, 0.4531349, 0.4865455, 0.4347258, 0.5812263, 0.…\n$ predicted_hi <dbl> 0.9437405, 0.8645374, 0.8794975, 0.8555630, 0.9144578, 0.…\n$ predicted    <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n```\n\n\n:::\n\n```{.r .cell-code}\n# high = 75th %ile; low = 25th %ile\ncomparisons(fit, variables = list(age = \"iqr\")) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,000\nColumns: 18\n$ rowid        <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ term         <chr> \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"…\n$ contrast     <chr> \"Q3 - Q1\", \"Q3 - Q1\", \"Q3 - Q1\", \"Q3 - Q1\", \"Q3 - Q1\", \"Q…\n$ estimate     <dbl> 0.11549285, 0.18099237, 0.17383559, 0.18445762, 0.1487362…\n$ std.error    <dbl> 0.013478609, 0.022433678, 0.021368981, 0.023404006, 0.018…\n$ statistic    <dbl> 8.568603, 8.067886, 8.134950, 7.881455, 8.258313, 8.23494…\n$ p.value      <dbl> 1.047476e-17, 7.152553e-16, 4.121079e-16, 3.235905e-15, 1…\n$ s.value      <dbl> 56.40586, 50.31239, 51.10783, 48.13475, 52.58773, 52.3056…\n$ conf.low     <dbl> 0.08907526, 0.13702317, 0.13195316, 0.13858662, 0.1134363…\n$ conf.high    <dbl> 0.14191044, 0.22496157, 0.21571803, 0.23032863, 0.1840361…\n$ race         <fct> white, white, white, white, white, white, white, white, w…\n$ age          <int> 60, 51, 24, 38, 25, 67, 40, 56, 32, 75, 46, 52, 22, 60, 2…\n$ educate      <dbl> 14, 10, 12, 8, 12, 12, 12, 10, 12, 16, 15, 12, 12, 12, 14…\n$ income       <dbl> 3.3458, 1.8561, 0.6304, 3.4183, 2.7852, 2.3866, 4.2857, 9…\n$ vote         <int> 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, …\n$ predicted_lo <dbl> 0.7589574, 0.5450262, 0.5780504, 0.5264779, 0.6673926, 0.…\n$ predicted_hi <dbl> 0.8744502, 0.7260185, 0.7518860, 0.7109355, 0.8161288, 0.…\n$ predicted    <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n```\n\n\n:::\n\n```{.r .cell-code}\n# high = 1 SD above; low = 1 SD below\ncomparisons(fit, variables = list(age = \"2sd\")) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,000\nColumns: 18\n$ rowid        <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ term         <chr> \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"…\n$ contrast     <chr> \"(x + sd) - (x - sd)\", \"(x + sd) - (x - sd)\", \"(x + sd) -…\n$ estimate     <dbl> 0.14399385, 0.22469520, 0.21587670, 0.22897272, 0.1849871…\n$ std.error    <dbl> 0.016766207, 0.027487650, 0.026217808, 0.028668738, 0.022…\n$ statistic    <dbl> 8.588338, 8.174406, 8.233972, 7.986843, 8.325331, 8.30893…\n$ p.value      <dbl> 8.823623e-18, 2.973280e-16, 1.811059e-16, 1.384381e-15, 8…\n$ s.value      <dbl> 56.65333, 51.57879, 52.29402, 49.35968, 53.40079, 53.2013…\n$ conf.low     <dbl> 0.11113269, 0.17082040, 0.16449074, 0.17278302, 0.1414371…\n$ conf.high    <dbl> 0.17685502, 0.27857000, 0.26726266, 0.28516241, 0.2285371…\n$ race         <fct> white, white, white, white, white, white, white, white, w…\n$ age          <int> 60, 51, 24, 38, 25, 67, 40, 56, 32, 75, 46, 52, 22, 60, 2…\n$ educate      <dbl> 14, 10, 12, 8, 12, 12, 12, 10, 12, 16, 15, 12, 12, 12, 14…\n$ income       <dbl> 3.3458, 1.8561, 0.6304, 3.4183, 2.7852, 2.3866, 4.2857, 9…\n$ vote         <int> 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, …\n$ predicted_lo <dbl> 0.7418547, 0.5222984, 0.5556273, 0.5036674, 0.6468164, 0.…\n$ predicted_hi <dbl> 0.8858485, 0.7469936, 0.7715040, 0.7326401, 0.8318036, 0.…\n$ predicted    <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n```\n\n\n:::\n:::\n\n\n\n\n#### How to compare?\n\nIf we choose to make a comparison, then we have to choose *how* to compare the two expected values `hi` and `lo`.\n\nThe simplest way is a difference, which is simply `hi - lo`, but we could also use the ratio `hi/lo` or the \"lift\" `(hi - lo)/lo`.\n\nWe can specify the comparison we want with the `comparison` argument to `comparisons()`. The default is `\"difference\"` and that's usually a good choice.\n\nWe can find the `\"ratio\"` rather than the `\"difference\"` by using `comparison = \"ratio\"`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#  high = 18; low = 90; comparison = ratio\ncomparisons(fit, \n            variables = list(age = c(18, 90)), \n            comparison = \"ratio\") |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,000\nColumns: 18\n$ rowid        <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ term         <chr> \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"…\n$ contrast     <chr> \"90 / 18\", \"90 / 18\", \"90 / 18\", \"90 / 18\", \"90 / 18\", \"9…\n$ estimate     <dbl> 1.377065, 1.907903, 1.807637, 1.968052, 1.573325, 1.61143…\n$ std.error    <dbl> 0.05108134, 0.15618248, 0.13648145, 0.18325488, 0.0849123…\n$ statistic    <dbl> 26.958270, 12.215858, 13.244560, 10.739426, 18.528813, 17…\n$ p.value      <dbl> 4.563059e-160, 2.557872e-34, 4.851146e-40, 6.645656e-27, …\n$ s.value      <dbl> 529.31849, 111.59061, 130.59880, 86.95965, 252.19243, 224…\n$ conf.low     <dbl> 1.276947, 1.601791, 1.540138, 1.608879, 1.406900, 1.43068…\n$ conf.high    <dbl> 1.477182, 2.214015, 2.075136, 2.327225, 1.739750, 1.79219…\n$ race         <fct> white, white, white, white, white, white, white, white, w…\n$ age          <int> 60, 51, 24, 38, 25, 67, 40, 56, 32, 75, 46, 52, 22, 60, 2…\n$ educate      <dbl> 14, 10, 12, 8, 12, 12, 12, 10, 12, 16, 15, 12, 12, 12, 14…\n$ income       <dbl> 3.3458, 1.8561, 0.6304, 3.4183, 2.7852, 2.3866, 4.2857, 9…\n$ vote         <int> 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, …\n$ predicted_lo <dbl> 0.6853277, 0.4531349, 0.4865455, 0.4347258, 0.5812263, 0.…\n$ predicted_hi <dbl> 0.9437405, 0.8645374, 0.8794975, 0.8555630, 0.9144578, 0.…\n$ predicted    <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n```\n\n\n:::\n:::\n\n\n\n\nWe can also supply our own function `\\(hi, lo) {...}`. I think the percent change `\\(hi, lo) (hi/lo) - 1)` is good. This is also known as \"lift\" and we can use `comparison = \"lift\"` instead.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#  high = 18; low = 90; comparison = custom (percent change)\ncomparisons(fit, \n            variables = list(age = c(18, 90)), \n            comparison = \\(hi, lo) (hi/lo) - 1) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,000\nColumns: 18\n$ rowid        <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ term         <chr> \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"…\n$ contrast     <chr> \"custom\", \"custom\", \"custom\", \"custom\", \"custom\", \"custom…\n$ estimate     <dbl> 0.37706459, 0.90790306, 0.80763680, 0.96805211, 0.5733248…\n$ std.error    <dbl> 0.05108134, 0.15618248, 0.13648145, 0.18325488, 0.0849123…\n$ statistic    <dbl> 7.381650, 5.813092, 5.917557, 5.282545, 6.751962, 6.62993…\n$ p.value      <dbl> 1.563395e-13, 6.132948e-09, 3.267581e-09, 1.274016e-07, 1…\n$ s.value      <dbl> 42.54038, 27.28077, 28.18913, 22.90411, 35.99663, 34.7934…\n$ conf.low     <dbl> 0.27694700, 0.60179103, 0.54013807, 0.60887915, 0.4068997…\n$ conf.high    <dbl> 0.4771822, 1.2140151, 1.0751355, 1.3272251, 0.7397500, 0.…\n$ predicted    <dbl> 0.8775302, 0.6786731, 0.5290410, 0.5755400, 0.6286173, 0.…\n$ race         <fct> white, white, white, white, white, white, white, white, w…\n$ age          <int> 60, 51, 24, 38, 25, 67, 40, 56, 32, 75, 46, 52, 22, 60, 2…\n$ educate      <dbl> 14, 10, 12, 8, 12, 12, 12, 10, 12, 16, 15, 12, 12, 12, 14…\n$ income       <dbl> 3.3458, 1.8561, 0.6304, 3.4183, 2.7852, 2.3866, 4.2857, 9…\n$ vote         <int> 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, …\n$ predicted_lo <dbl> 0.6853277, 0.4531349, 0.4865455, 0.4347258, 0.5812263, 0.…\n$ predicted_hi <dbl> 0.9437405, 0.8645374, 0.8794975, 0.8555630, 0.9144578, 0.…\n```\n\n\n:::\n:::\n\n\n\n\n### Grid\n\nNext, we need to decide where to compute these predictions or comparisons. In most cases, the values of the non-focal variables matter, so we have to make a choice about these other variables. \n\nBy default, `predictions()` and `comparisons()` use the observed data, returning one value for each row. However, this isn't always what we want. \n\nTo help us create the grid we want, {marginaleffects} has a powerful `datagrid()` function.\n\nFor example, we can supply `newdata = datagrid(type = \"mean_or_mode\")` to `predictions()`. This computes the prediction for a \"typical case\" has numeric variables equal to the mean and factor variables equal to their mode.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions(fit, newdata = datagrid(type = \"mean_or_mode\")) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 13\n$ rowid     <dbl> 1\n$ estimate  <dbl> 0.7858649\n$ p.value   <dbl> 1.387065e-92\n$ s.value   <dbl> 305.1453\n$ conf.low  <dbl> 0.7641047\n$ conf.high <dbl> 0.8061271\n$ age       <int> 45\n$ educate   <dbl> 12.06675\n$ income    <dbl> 3.88664\n$ race      <fct> white\n$ vote      <int> 1\n$ type      <chr> \"mean_or_mode\"\n$ df        <dbl> Inf\n```\n\n\n:::\n:::\n\n\n\nIf we instead supply `age = 18:90` to `datagrid()` then it will create a grid that varies age from 18 to 90 while fixing the other variables at their `mean_or_mode`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions(fit, newdata = datagrid(age = 18:90)) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 73\nColumns: 12\n$ rowid     <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1…\n$ estimate  <dbl> 0.6305579, 0.6371384, 0.6436679, 0.6501444, 0.6565660, 0.662…\n$ p.value   <dbl> 2.331460e-07, 2.236297e-08, 1.587534e-09, 8.070391e-11, 2.83…\n$ s.value   <dbl> 22.03226, 25.41431, 29.23057, 33.52857, 38.35926, 43.77650, …\n$ conf.low  <dbl> 0.5822381, 0.5904128, 0.5985160, 0.6065424, 0.6144863, 0.622…\n$ conf.high <dbl> 0.6763951, 0.6814098, 0.6864024, 0.6913731, 0.6963224, 0.701…\n$ educate   <dbl> 12.06675, 12.06675, 12.06675, 12.06675, 12.06675, 12.06675, …\n$ income    <dbl> 3.88664, 3.88664, 3.88664, 3.88664, 3.88664, 3.88664, 3.8866…\n$ race      <fct> white, white, white, white, white, white, white, white, whit…\n$ vote      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ age       <int> 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, …\n$ df        <dbl> Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, …\n```\n\n\n:::\n:::\n\n\n\n\n::: callout-tip\nYou can always inspect the output of `predictions()` to see the grid that you are using.\n:::\n\nWe can use the same logic with comparisons. We can compute the first difference of a focal variable while systematically varying another variable (e.g., `educate` or `race`) and fixing the other variables at their `\"mean_or_mode\"`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# first difference of moving age from 18 to 90 for respondents with \n#   12, 14, and 16 years of education\ncomparisons(fit, \n            variables = list(age = c(18, 90)), \n            newdata = datagrid(educate = c(12, 14, 16))) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3\nColumns: 18\n$ rowid        <int> 1, 2, 3\n$ term         <chr> \"age\", \"age\", \"age\"\n$ contrast     <chr> \"90 - 18\", \"90 - 18\", \"90 - 18\"\n$ estimate     <dbl> 0.3007122, 0.2430060, 0.1902606\n$ std.error    <dbl> 0.03213503, 0.02560497, 0.02112214\n$ statistic    <dbl> 9.357771, 9.490580, 9.007636\n$ p.value      <dbl> 8.143638e-21, 2.297518e-21, 2.105455e-19\n$ s.value      <dbl> 66.73482, 68.56041, 62.04250\n$ conf.low     <dbl> 0.2377287, 0.1928212, 0.1488619\n$ conf.high    <dbl> 0.3636957, 0.2931908, 0.2316592\n$ age          <int> 45, 45, 45\n$ income       <dbl> 3.88664, 3.88664, 3.88664\n$ race         <fct> white, white, white\n$ vote         <int> 1, 1, 1\n$ educate      <dbl> 12, 14, 16\n$ predicted_lo <dbl> 0.6278227, 0.7056094, 0.7730163\n$ predicted_hi <dbl> 0.9285349, 0.9486155, 0.9632768\n$ predicted    <dbl> NA, NA, NA\n```\n\n\n:::\n\n```{.r .cell-code}\n# first difference of moving age from 18 to 90 for white respondents \n#   and for non-white respondents\ncomparisons(fit, \n            variables = list(age = c(18, 90)), \n            newdata = datagrid(race = unique)) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2\nColumns: 18\n$ rowid        <int> 1, 2\n$ term         <chr> \"age\", \"age\"\n$ contrast     <chr> \"90 - 18\", \"90 - 18\"\n$ estimate     <dbl> 0.3404720, 0.2987511\n$ std.error    <dbl> 0.03832429, 0.03189213\n$ statistic    <dbl> 8.883975, 9.367549\n$ p.value      <dbl> 6.451296e-19, 7.423628e-21\n$ s.value      <dbl> 60.42704, 66.86837\n$ conf.low     <dbl> 0.2653578, 0.2362437\n$ conf.high    <dbl> 0.4155862, 0.3612585\n$ age          <int> 45, 45\n$ educate      <dbl> 12.06675, 12.06675\n$ income       <dbl> 3.88664, 3.88664\n$ vote         <int> 1, 1\n$ race         <fct> others, white\n$ predicted_lo <dbl> 0.5704809, 0.6305579\n$ predicted_hi <dbl> 0.9109528, 0.9293090\n$ predicted    <dbl> NA, NA\n```\n\n\n:::\n:::\n\n\n\n### Aggregation\n\nFinally, we need to decide what to do with the collection of estimates from the grid. For example, by default, `comparisons` returns a first difference for every row in the data set.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfd <- comparisons(fit, variables = list(age = c(18, 90))) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,000\nColumns: 18\n$ rowid        <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ term         <chr> \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"age\", \"…\n$ contrast     <chr> \"90 - 18\", \"90 - 18\", \"90 - 18\", \"90 - 18\", \"90 - 18\", \"9…\n$ estimate     <dbl> 0.25841282, 0.41140255, 0.39295205, 0.42083720, 0.3332314…\n$ std.error    <dbl> 0.02716613, 0.04374691, 0.04168724, 0.04639905, 0.0351402…\n$ statistic    <dbl> 9.512315, 9.404151, 9.426195, 9.069954, 9.482914, 9.48784…\n$ p.value      <dbl> 1.864654e-21, 5.245209e-21, 4.252375e-21, 1.190675e-19, 2…\n$ s.value      <dbl> 68.86158, 67.36949, 67.67222, 62.86485, 68.45434, 68.5226…\n$ conf.low     <dbl> 0.20516818, 0.32566018, 0.31124656, 0.32989674, 0.2643579…\n$ conf.high    <dbl> 0.3116575, 0.4971449, 0.4746575, 0.5117777, 0.4021050, 0.…\n$ race         <fct> white, white, white, white, white, white, white, white, w…\n$ age          <int> 60, 51, 24, 38, 25, 67, 40, 56, 32, 75, 46, 52, 22, 60, 2…\n$ educate      <dbl> 14, 10, 12, 8, 12, 12, 12, 10, 12, 16, 15, 12, 12, 12, 14…\n$ income       <dbl> 3.3458, 1.8561, 0.6304, 3.4183, 2.7852, 2.3866, 4.2857, 9…\n$ vote         <int> 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, …\n$ predicted_lo <dbl> 0.6853277, 0.4531349, 0.4865455, 0.4347258, 0.5812263, 0.…\n$ predicted_hi <dbl> 0.9437405, 0.8645374, 0.8794975, 0.8555630, 0.9144578, 0.…\n$ predicted    <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n```\n\n\n:::\n:::\n\n\n\n\nWe could plot these.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscatter <- ggplot(fd, aes(x = age, y = estimate, size = income, color = educate)) +\n  facet_wrap(vars(race)) +\n  geom_point(shape = 19, alpha = 0.25)\n\nhist <- ggplot(fd, aes(x = estimate)) + \n  geom_histogram()\n\nlibrary(patchwork)\nscatter / hist\n```\n\n::: {.cell-output-display}\n![](01-marginaleffects_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\nIt's really useful to summarize the heterogeneity of the effects from your model. This is one of the great strengths of parametric modeling---it allows a much richer set of quantities of interest.^[There's also some cost---you do need to assume that your parametric model is a good model.]\n\nBut ultimately it's helpful to combine these many estimates into a single summary of \"the effect.\" It's common to average the comparisons. If you have a collection of comparisons that you want to average, then you can use `avg_comparisons()` rather than `comparisons()`. `avg_comparisons()` will average the comparisons produced by `comparisons()` and compute the correct SE (using the delta method, again).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\navg_comparisons(fit, variables = list(age = c(18, 90))) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 9\n$ term      <chr> \"age\"\n$ contrast  <chr> \"90 - 18\"\n$ estimate  <dbl> 0.2994053\n$ std.error <dbl> 0.03039745\n$ statistic <dbl> 9.849684\n$ p.value   <dbl> 6.875961e-23\n$ s.value   <dbl> 73.62278\n$ conf.low  <dbl> 0.2398274\n$ conf.high <dbl> 0.3589832\n```\n\n\n:::\n:::\n\n\n\n\n## Average Case or Observed Value\n\nWhen trying to find representative summary of \"the effect\" from non-linear model in which the effects vary, @hanmer2013 note that there are two approaches. \n\n- The *average case* approach tries to identify a typical case and compute the effect for that case. \nThe *observed value* approach computes the effect for all cases and then averages those effects.\n\nIn many cases the two approaches give similar estimates, but these are *different estimands* and sometimes the estimates meaningfully diverge. @beger2015 discuss potential differences.\n\nIt is easy to compute either estimand using {marginaleffects}.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# avg. case approach\navg_comparisons(fit, \n                # set the \"other\" values to their means or modes\n                newdata = datagrid(type = \"mean_or_mode\"),\n                variables = list(age = c(18, 90))) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 19\n$ rowid        <int> 1\n$ term         <chr> \"age\"\n$ contrast     <chr> \"90 - 18\"\n$ estimate     <dbl> 0.2987511\n$ std.error    <dbl> 0.03189213\n$ statistic    <dbl> 9.367549\n$ p.value      <dbl> 7.423628e-21\n$ s.value      <dbl> 66.86837\n$ conf.low     <dbl> 0.2362437\n$ conf.high    <dbl> 0.3612585\n$ age          <int> 45\n$ educate      <dbl> 12.06675\n$ income       <dbl> 3.88664\n$ race         <fct> white\n$ vote         <int> 1\n$ type         <chr> \"mean_or_mode\"\n$ predicted_lo <dbl> 0.6305579\n$ predicted_hi <dbl> 0.929309\n$ predicted    <dbl> NA\n```\n\n\n:::\n\n```{.r .cell-code}\n# observed value approach\navg_comparisons(fit, variables = list(age = c(18, 90))) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 9\n$ term      <chr> \"age\"\n$ contrast  <chr> \"90 - 18\"\n$ estimate  <dbl> 0.2994053\n$ std.error <dbl> 0.03039745\n$ statistic <dbl> 9.849684\n$ p.value   <dbl> 6.875961e-23\n$ s.value   <dbl> 73.62278\n$ conf.low  <dbl> 0.2398274\n$ conf.high <dbl> 0.3589832\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}